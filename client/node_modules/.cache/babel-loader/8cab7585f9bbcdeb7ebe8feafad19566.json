{"ast":null,"code":"import React,{useContext}from'react';import{useQuery}from'@apollo/client';import{store}from'context/store';// Project Components\nimport FilterSelect from'components/common/FilterSelect';// GQL\nimport{GET_ITINERARY_LIST}from'graphql/queries';import Loader from'components/common/Loader';import Notification from'components/common/Notification';var SelectItinerary=function SelectItinerary(){var globalState=useContext(store);var state=globalState.state,dispatch=globalState.dispatch;var selectedShip=state.selectedShip,selectedProduct=state.selectedProduct,selectedItinerary=state.selectedItinerary;var _useQuery=useQuery(GET_ITINERARY_LIST,{variables:{shipId:selectedShip.id,productId:selectedProduct.id},fetchPolicy:'network-only'}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;var onChange=function onChange(id){var itinerary=data.itineraryList.find(function(itinerary){return itinerary.id===id;});dispatch({type:'setSelectedItinerary',value:itinerary});};if(loading)return React.createElement(Loader,null);if(error)return React.createElement(Notification,{type:\"error\",message:error.message});return React.createElement(FilterSelect,{label:\"Itinerary\",displayKey:\"itineraryDesc\",options:data.itineraryList,value:selectedItinerary.id,onChange:onChange,width:250,disabled:!selectedProduct.id});};export default SelectItinerary;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/main-filters/SelectItinerary.js"],"names":["React","useContext","useQuery","store","FilterSelect","GET_ITINERARY_LIST","Loader","Notification","SelectItinerary","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","variables","shipId","id","productId","fetchPolicy","loading","error","data","onChange","itinerary","itineraryList","find","type","value","message"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,KAAT,KAAsB,eAAtB,CAEA;AACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA;AACA,OAASC,kBAAT,KAAmC,iBAAnC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,GAAMC,CAAAA,WAAW,CAAGR,UAAU,CAACE,KAAD,CAA9B,CAD4B,GAEpBO,CAAAA,KAFoB,CAEAD,WAFA,CAEpBC,KAFoB,CAEbC,QAFa,CAEAF,WAFA,CAEbE,QAFa,IAGpBC,CAAAA,YAHoB,CAGiCF,KAHjC,CAGpBE,YAHoB,CAGNC,eAHM,CAGiCH,KAHjC,CAGNG,eAHM,CAGWC,iBAHX,CAGiCJ,KAHjC,CAGWI,iBAHX,eAKKZ,QAAQ,CAACG,kBAAD,CAAqB,CAC5DU,SAAS,CAAE,CAAEC,MAAM,CAAEJ,YAAY,CAACK,EAAvB,CAA2BC,SAAS,CAAEL,eAAe,CAACI,EAAtD,CADiD,CAE5DE,WAAW,CAAE,cAF+C,CAArB,CALb,CAKpBC,OALoB,WAKpBA,OALoB,CAKXC,KALW,WAKXA,KALW,CAKJC,IALI,WAKJA,IALI,CAU5B,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAN,EAAE,CAAI,CACrB,GAAMO,CAAAA,SAAS,CAAGF,IAAI,CAACG,aAAL,CAAmBC,IAAnB,CAAwB,SAAAF,SAAS,QAAIA,CAAAA,SAAS,CAACP,EAAV,GAAiBA,EAArB,EAAjC,CAAlB,CACAN,QAAQ,CAAC,CAAEgB,IAAI,CAAE,sBAAR,CAAgCC,KAAK,CAAEJ,SAAvC,CAAD,CAAR,CACD,CAHD,CAKA,GAAIJ,OAAJ,CAAa,MAAO,qBAAC,MAAD,MAAP,CACb,GAAIC,KAAJ,CAAW,MAAO,qBAAC,YAAD,EAAc,IAAI,CAAC,OAAnB,CAA2B,OAAO,CAAEA,KAAK,CAACQ,OAA1C,EAAP,CACX,MACE,qBAAC,YAAD,EACE,KAAK,CAAC,WADR,CAEE,UAAU,CAAC,eAFb,CAGE,OAAO,CAAEP,IAAI,CAACG,aAHhB,CAIE,KAAK,CAAEX,iBAAiB,CAACG,EAJ3B,CAKE,QAAQ,CAAEM,QALZ,CAME,KAAK,CAAE,GANT,CAOE,QAAQ,CAAE,CAACV,eAAe,CAACI,EAP7B,EADF,CAWD,CA5BD,CA8BA,cAAeT,CAAAA,eAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_ITINERARY_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectItinerary = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip, selectedProduct, selectedItinerary } = state\n\n  const { loading, error, data } = useQuery(GET_ITINERARY_LIST, {\n    variables: { shipId: selectedShip.id, productId: selectedProduct.id },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const itinerary = data.itineraryList.find(itinerary => itinerary.id === id)\n    dispatch({ type: 'setSelectedItinerary', value: itinerary })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Itinerary\"\n      displayKey=\"itineraryDesc\"\n      options={data.itineraryList}\n      value={selectedItinerary.id}\n      onChange={onChange}\n      width={250}\n      disabled={!selectedProduct.id}\n    />\n  )\n}\n\nexport default SelectItinerary\n"]},"metadata":{},"sourceType":"module"}