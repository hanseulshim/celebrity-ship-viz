{"ast":null,"code":"import _slicedToArray from\"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: 400px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useContext,useEffect}from'react';import styled from'styled-components';import{store}from'context/store';import{useQuery}from'@apollo/client';import{GET_SUPPLY_BURNDOWN_CHART}from'graphql/queries';import{supplyBurndownLayout}from'./config';import{createSupplyBurndown}from'./helper';import Loader from'components/common/Loader';import Notification from'components/common/Notification';import Plot from'react-plotly.js';import{getFilterVariables}from'helper';import supplyBurndownBlurry from'assets/supplyBurndownBlurry.png';var Blurry=styled.img(_templateObject());var SupplyBurndown=function SupplyBurndown(){var globalState=useContext(store);var state=globalState.state;var selectedShip=state.selectedShip,selectedProduct=state.selectedProduct,selectedItinerary=state.selectedItinerary,selectedSailDate=state.selectedSailDate,selectedBookingWeek=state.selectedBookingWeek,peerGroupFilters=state.peerGroupFilters,selectedPeerShip=state.selectedPeerShip,selectedPeerProduct=state.selectedPeerProduct,selectedPeerSailingDates=state.selectedPeerSailingDates,filter=state.filter,peerFilter=state.peerFilter,filterCount=state.filterCount;var _useQuery=useQuery(GET_SUPPLY_BURNDOWN_CHART,{variables:getFilterVariables(selectedShip.id,selectedSailDate.id,selectedBookingWeek,selectedProduct.id,selectedItinerary.id,peerGroupFilters,selectedPeerShip,selectedPeerProduct.id,selectedPeerSailingDates[0],selectedPeerSailingDates[1],filter,peerFilter,filterCount),skip:!selectedShip.id||!selectedSailDate.id,fetchPolicy:'network-only'}),networkStatus=_useQuery.networkStatus,error=_useQuery.error,data=_useQuery.data;// local state for plot data\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),plotData=_useState2[0],setPlotdata=_useState2[1];useEffect(function(){if(data){var lines=Object.keys(data.supplyBurndownChart);var lineData=lines.filter(function(v){return v!=='__typename';}).map(function(line){return createSupplyBurndown(data.supplyBurndownChart[line],line,selectedShip.shipName);});setPlotdata(lineData);}},[selectedShip,selectedSailDate,data]);if(!selectedShip.id||!selectedSailDate.id){return React.createElement(Blurry,{src:supplyBurndownBlurry});}if(networkStatus!==2&&networkStatus!==7){return React.createElement(Loader,null);}if(error)return React.createElement(Notification,{type:\"error\",message:error.message});return React.createElement(React.Fragment,null,React.createElement(Plot,{data:plotData,layout:supplyBurndownLayout,config:{displayModeBar:false}}));};export default SupplyBurndown;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/SupplyBurndown.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_SUPPLY_BURNDOWN_CHART","supplyBurndownLayout","createSupplyBurndown","Loader","Notification","Plot","getFilterVariables","supplyBurndownBlurry","Blurry","img","SupplyBurndown","globalState","state","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","variables","id","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","lines","Object","keys","supplyBurndownChart","lineData","v","map","line","shipName","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries'\nimport { supplyBurndownLayout } from './config'\nimport { createSupplyBurndown } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport { getFilterVariables } from 'helper'\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst SupplyBurndown = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n\n  const { networkStatus, error, data } = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n    variables: getFilterVariables(\n      selectedShip.id,\n      selectedSailDate.id,\n      selectedBookingWeek,\n      selectedProduct.id,\n      selectedItinerary.id,\n      peerGroupFilters,\n      selectedPeerShip,\n      selectedPeerProduct.id,\n      selectedPeerSailingDates[0],\n      selectedPeerSailingDates[1],\n      filter,\n      peerFilter,\n      filterCount\n    ),\n    skip: !selectedShip.id || !selectedSailDate.id,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const lines = Object.keys(data.supplyBurndownChart)\n      const lineData = lines\n        .filter(v => v !== '__typename')\n        .map(line =>\n          createSupplyBurndown(\n            data.supplyBurndownChart[line],\n            line,\n            selectedShip.shipName\n          )\n        )\n      setPlotdata(lineData)\n    }\n  }, [selectedShip, selectedSailDate, data])\n\n  if (!selectedShip.id || !selectedSailDate.id) {\n    return <Blurry src={supplyBurndownBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) {\n    return <Loader />\n  }\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={supplyBurndownLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default SupplyBurndown\n"]},"metadata":{},"sourceType":"module"}