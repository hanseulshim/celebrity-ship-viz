{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/peer-group-filters/SelectPeerShip.js\";\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { store } from 'context/store'; // Project Components\n\nimport FilterSelect from 'components/common/FilterSelect';\nimport Notification from 'components/common/Notification';\nimport Loader from 'components/common/Loader'; // GQL\n\nimport { GET_SHIP_LIST } from 'graphql/queries';\n\nconst SelectPeerShip = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedPeerShip = state.selectedPeerShip;\n\n  const _useQuery = useQuery(GET_SHIP_LIST, {\n    fetchPolicy: 'network-only'\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const onChange = value => {\n    dispatch({\n      type: 'setSelectedPeerShip',\n      value\n    });\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n  return React.createElement(FilterSelect, {\n    label: \"Ship(s)\",\n    mode: \"multiple\",\n    displayKey: \"shipName\",\n    options: data.shipList,\n    value: selectedPeerShip,\n    width: 300,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n};\n\nexport default SelectPeerShip;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/peer-group-filters/SelectPeerShip.js"],"names":["React","useContext","useQuery","store","FilterSelect","Notification","Loader","GET_SHIP_LIST","SelectPeerShip","globalState","state","dispatch","selectedPeerShip","fetchPolicy","loading","error","data","onChange","value","type","message","shipList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,WAAW,GAAGR,UAAU,CAACE,KAAD,CAA9B;AAD2B,QAEnBO,KAFmB,GAECD,WAFD,CAEnBC,KAFmB;AAAA,QAEZC,QAFY,GAECF,WAFD,CAEZE,QAFY;AAAA,QAGnBC,gBAHmB,GAGEF,KAHF,CAGnBE,gBAHmB;;AAAA,oBAIMV,QAAQ,CAACK,aAAD,EAAgB;AACvDM,IAAAA,WAAW,EAAE;AAD0C,GAAhB,CAJd;AAAA,QAInBC,OAJmB,aAInBA,OAJmB;AAAA,QAIVC,KAJU,aAIVA,KAJU;AAAA,QAIHC,IAJG,aAIHA,IAJG;;AAO3B,QAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBP,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE,qBAAR;AAA+BD,MAAAA;AAA/B,KAAD,CAAR;AACD,GAFD;;AAGA,MAAIJ,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACK,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,UAAU,EAAC,UAHb;AAIE,IAAA,OAAO,EAAEJ,IAAI,CAACK,QAJhB;AAKE,IAAA,KAAK,EAAET,gBALT;AAME,IAAA,KAAK,EAAE,GANT;AAOE,IAAA,QAAQ,EAAEK,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAvBD;;AAyBA,eAAeT,cAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SHIP_LIST } from 'graphql/queries'\n\nconst SelectPeerShip = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedPeerShip } = state\n  const { loading, error, data } = useQuery(GET_SHIP_LIST, {\n    fetchPolicy: 'network-only'\n  })\n  const onChange = value => {\n    dispatch({ type: 'setSelectedPeerShip', value })\n  }\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Ship(s)\"\n      mode=\"multiple\"\n      displayKey=\"shipName\"\n      options={data.shipList}\n      value={selectedPeerShip}\n      width={300}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectPeerShip\n"]},"metadata":{},"sourceType":"module"}