{"ast":null,"code":"import _objectSpread from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/peer-group-filters/PeerDropdownMenu.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useLazyQuery } from '@apollo/client';\nimport { Menu, Dropdown, Checkbox } from 'antd';\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries';\nimport { getFilterVariables } from 'helper';\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.5em 1em;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 2px;\n  cursor: pointer;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`;\nconst ApplyButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.25em 0.25em;\n  font-weight: 500;\n  font-size: 0.75rem;\n  border-radius: 2px;\n  cursor: pointer;\n  min-width: 50px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`;\nconst StyledMenu = styled(Menu)`\n  max-height: 300px;\n  overflow: scroll;\n`;\nconst StyledCheckbox = styled(Checkbox)``;\n\nconst PeerDropdownMenu = (_ref) => {\n  let options = _ref.options,\n      title = _ref.title,\n      displayKey = _ref.displayKey,\n      props = _objectWithoutProperties(_ref, [\"options\", \"title\", \"displayKey\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek,\n        peerGroupFilters = state.peerGroupFilters,\n        selectedPeerShip = state.selectedPeerShip,\n        selectedPeerProduct = state.selectedPeerProduct,\n        selectedPeerSailingDates = state.selectedPeerSailingDates,\n        filter = state.filter,\n        peerFilter = state.peerFilter,\n        filterCount = state.filterCount;\n\n  const _useLazyQuery = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({\n        type: 'setShipData',\n        value: data.deckVisualList\n      });\n    },\n    fetchPolicy: 'network-only'\n  }),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n        applyFilters = _useLazyQuery2[0]; // keep local state array for save button\n\n\n  const _useState3 = useState(peerFilter[title]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        subFilter = _useState4[0],\n        setSubFilter = _useState4[1];\n\n  useEffect(() => {\n    setSubFilter(peerFilter[title]);\n  }, [peerFilter, title]);\n\n  const handleCheck = ({\n    id,\n    value\n  }) => {\n    const foundFilter = subFilter.find(v => v.id === id);\n\n    if (foundFilter) {\n      setSubFilter(subFilter.filter(v => v.id !== id));\n    } else {\n      setSubFilter([...subFilter, {\n        id,\n        value\n      }]);\n    }\n  };\n\n  const handleSave = e => {\n    if (e.key === 'save') {\n      dispatch({\n        type: 'setSelectedPeerSubFilter',\n        title,\n        value: subFilter\n      });\n\n      const peerFilterCopy = _objectSpread({}, peerFilter);\n\n      setVisible(false);\n      peerFilterCopy[title] = subFilter;\n      applyFilters({\n        variables: getFilterVariables(selectedShip.id, selectedSailDate.id, selectedBookingWeek, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilterCopy, filterCount)\n      });\n    }\n  };\n\n  const handleVisibleChange = v => {\n    setVisible(v);\n\n    if (!v) {\n      setSubFilter(peerFilter[title]);\n    }\n  };\n\n  const formatTitle = s => {\n    const split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    return split.charAt(0).toUpperCase() + split.slice(1);\n  };\n\n  const menu = React.createElement(StyledMenu, {\n    onClick: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, options.map((option, i) => React.createElement(Menu.Item, {\n    key: 'option' + i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(StyledCheckbox, {\n    onChange: () => handleCheck(option),\n    checked: !!subFilter.find(f => f.id === option.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, option[displayKey]))), React.createElement(Menu.Item, {\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(ApplyButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Apply\")));\n  return React.createElement(Dropdown, {\n    overlay: menu,\n    onVisibleChange: handleVisibleChange,\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, formatTitle(title)));\n};\n\nexport default PeerDropdownMenu;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/peer-group-filters/PeerDropdownMenu.js"],"names":["React","useState","useContext","useEffect","styled","store","useLazyQuery","Menu","Dropdown","Checkbox","GET_VISUAL_DECK_LIST","getFilterVariables","Button","button","props","theme","white","biscay","ApplyButton","StyledMenu","StyledCheckbox","PeerDropdownMenu","options","title","displayKey","visible","setVisible","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","onCompleted","data","type","value","deckVisualList","fetchPolicy","applyFilters","subFilter","setSubFilter","handleCheck","id","foundFilter","find","v","handleSave","e","key","peerFilterCopy","variables","handleVisibleChange","formatTitle","s","split","replace","charAt","toUpperCase","slice","menu","map","option","i","f"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,QAAyC,MAAzC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,MAAMC,MAAM,GAAGR,MAAM,CAACS,MAAO;;;;WAIlBC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,KAAM;sBAChBF,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYE,MAAO;;;;;;;CALlD;AAcA,MAAMC,WAAW,GAAGd,MAAM,CAACS,MAAO;;;;WAIvBC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,KAAM;sBAChBF,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYE,MAAO;;;;;;;;CALlD;AAeA,MAAME,UAAU,GAAGf,MAAM,CAACG,IAAD,CAAO;;;CAAhC;AAKA,MAAMa,cAAc,GAAGhB,MAAM,CAACK,QAAD,CAAW,EAAxC;;AAEA,MAAMY,gBAAgB,GAAG,UAA8C;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAZV,KAAY;;AAAA,oBACvCb,QAAQ,CAAC,KAAD,CAD+B;AAAA;AAAA,QAC9DwB,OAD8D;AAAA,QACrDC,UADqD;;AAErE,QAAMC,WAAW,GAAGzB,UAAU,CAACG,KAAD,CAA9B;AAFqE,QAG7DuB,KAH6D,GAGzCD,WAHyC,CAG7DC,KAH6D;AAAA,QAGtDC,QAHsD,GAGzCF,WAHyC,CAGtDE,QAHsD;AAAA,QAKnEC,YALmE,GAiBjEF,KAjBiE,CAKnEE,YALmE;AAAA,QAMnEC,eANmE,GAiBjEH,KAjBiE,CAMnEG,eANmE;AAAA,QAOnEC,iBAPmE,GAiBjEJ,KAjBiE,CAOnEI,iBAPmE;AAAA,QAQnEC,gBARmE,GAiBjEL,KAjBiE,CAQnEK,gBARmE;AAAA,QASnEC,mBATmE,GAiBjEN,KAjBiE,CASnEM,mBATmE;AAAA,QAUnEC,gBAVmE,GAiBjEP,KAjBiE,CAUnEO,gBAVmE;AAAA,QAWnEC,gBAXmE,GAiBjER,KAjBiE,CAWnEQ,gBAXmE;AAAA,QAYnEC,mBAZmE,GAiBjET,KAjBiE,CAYnES,mBAZmE;AAAA,QAanEC,wBAbmE,GAiBjEV,KAjBiE,CAanEU,wBAbmE;AAAA,QAcnEC,MAdmE,GAiBjEX,KAjBiE,CAcnEW,MAdmE;AAAA,QAenEC,UAfmE,GAiBjEZ,KAjBiE,CAenEY,UAfmE;AAAA,QAgBnEC,WAhBmE,GAiBjEb,KAjBiE,CAgBnEa,WAhBmE;;AAAA,wBAkB9CnC,YAAY,CAACI,oBAAD,EAAuB;AACxDgC,IAAAA,WAAW,EAAEC,IAAI,IAAI;AACnBd,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAEF,IAAI,CAACG;AAAnC,OAAD,CAAR;AACD,KAHuD;AAIxDC,IAAAA,WAAW,EAAE;AAJ2C,GAAvB,CAlBkC;AAAA;AAAA,QAkB9DC,YAlB8D,sBAyBrE;;;AAzBqE,qBA0BnC/C,QAAQ,CAACuC,UAAU,CAACjB,KAAD,CAAX,CA1B2B;AAAA;AAAA,QA0B9D0B,SA1B8D;AAAA,QA0BnDC,YA1BmD;;AA4BrE/C,EAAAA,SAAS,CAAC,MAAM;AACd+C,IAAAA,YAAY,CAACV,UAAU,CAACjB,KAAD,CAAX,CAAZ;AACD,GAFQ,EAEN,CAACiB,UAAD,EAAajB,KAAb,CAFM,CAAT;;AAIA,QAAM4B,WAAW,GAAG,CAAC;AAAEC,IAAAA,EAAF;AAAMP,IAAAA;AAAN,GAAD,KAAmB;AACrC,UAAMQ,WAAW,GAAGJ,SAAS,CAACK,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA7B,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACfH,MAAAA,YAAY,CAACD,SAAS,CAACV,MAAV,CAAiBgB,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA/B,CAAD,CAAZ;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEG,QAAAA,EAAF;AAAMP,QAAAA;AAAN,OAAf,CAAD,CAAZ;AACD;AACF,GAPD;;AASA,QAAMW,UAAU,GAAGC,CAAC,IAAI;AACtB,QAAIA,CAAC,CAACC,GAAF,KAAU,MAAd,EAAsB;AACpB7B,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,0BAAR;AAAoCrB,QAAAA,KAApC;AAA2CsB,QAAAA,KAAK,EAAEI;AAAlD,OAAD,CAAR;;AACA,YAAMU,cAAc,qBAAQnB,UAAR,CAApB;;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAiC,MAAAA,cAAc,CAACpC,KAAD,CAAd,GAAwB0B,SAAxB;AACAD,MAAAA,YAAY,CAAC;AACXY,QAAAA,SAAS,EAAEjD,kBAAkB,CAC3BmB,YAAY,CAACsB,EADc,EAE3BnB,gBAAgB,CAACmB,EAFU,EAG3BlB,mBAH2B,EAI3BH,eAAe,CAACqB,EAJW,EAK3BpB,iBAAiB,CAACoB,EALS,EAM3BjB,gBAN2B,EAO3BC,gBAP2B,EAQ3BC,mBAAmB,CAACe,EARO,EAS3Bd,wBAAwB,CAAC,CAAD,CATG,EAU3BA,wBAAwB,CAAC,CAAD,CAVG,EAW3BC,MAX2B,EAY3BoB,cAZ2B,EAa3BlB,WAb2B;AADlB,OAAD,CAAZ;AAiBD;AACF,GAxBD;;AA0BA,QAAMoB,mBAAmB,GAAGN,CAAC,IAAI;AAC/B7B,IAAAA,UAAU,CAAC6B,CAAD,CAAV;;AACA,QAAI,CAACA,CAAL,EAAQ;AACNL,MAAAA,YAAY,CAACV,UAAU,CAACjB,KAAD,CAAX,CAAZ;AACD;AACF,GALD;;AAOA,QAAMuC,WAAW,GAAGC,CAAC,IAAI;AACvB,UAAMC,KAAK,GAAGD,CAAC,CAACE,OAAF,CAAU,mBAAV,EAA+B,KAA/B,CAAd;AACA,WAAOD,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCH,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAvC;AACD,GAHD;;AAKA,QAAMC,IAAI,GACR,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEb,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlC,OAAO,CAACgD,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,KACX,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAE,WAAWA,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,MAAMrB,WAAW,CAACoB,MAAD,CAD7B;AAEE,IAAA,OAAO,EAAE,CAAC,CAACtB,SAAS,CAACK,IAAV,CAAemB,CAAC,IAAIA,CAAC,CAACrB,EAAF,KAASmB,MAAM,CAACnB,EAApC,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGmB,MAAM,CAAC/C,UAAD,CAJT,CADF,CADD,CADH,EAWE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAXF,CADF;AAkBA,SACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAE6C,IADX;AAEE,IAAA,eAAe,EAAER,mBAFnB;AAGE,IAAA,OAAO,EAAEpC,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASqC,WAAW,CAACvC,KAAD,CAApB,CALF,CADF;AASD,CA1GD;;AA4GA,eAAeF,gBAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useLazyQuery } from '@apollo/client'\nimport { Menu, Dropdown, Checkbox } from 'antd'\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.5em 1em;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 2px;\n  cursor: pointer;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst ApplyButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.25em 0.25em;\n  font-weight: 500;\n  font-size: 0.75rem;\n  border-radius: 2px;\n  cursor: pointer;\n  min-width: 50px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst StyledMenu = styled(Menu)`\n  max-height: 300px;\n  overflow: scroll;\n`\n\nconst StyledCheckbox = styled(Checkbox)``\n\nconst PeerDropdownMenu = ({ options, title, displayKey, ...props }) => {\n  const [visible, setVisible] = useState(false)\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  // keep local state array for save button\n  const [subFilter, setSubFilter] = useState(peerFilter[title])\n\n  useEffect(() => {\n    setSubFilter(peerFilter[title])\n  }, [peerFilter, title])\n\n  const handleCheck = ({ id, value }) => {\n    const foundFilter = subFilter.find(v => v.id === id)\n    if (foundFilter) {\n      setSubFilter(subFilter.filter(v => v.id !== id))\n    } else {\n      setSubFilter([...subFilter, { id, value }])\n    }\n  }\n\n  const handleSave = e => {\n    if (e.key === 'save') {\n      dispatch({ type: 'setSelectedPeerSubFilter', title, value: subFilter })\n      const peerFilterCopy = { ...peerFilter }\n      setVisible(false)\n      peerFilterCopy[title] = subFilter\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          selectedBookingWeek,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilterCopy,\n          filterCount\n        )\n      })\n    }\n  }\n\n  const handleVisibleChange = v => {\n    setVisible(v)\n    if (!v) {\n      setSubFilter(peerFilter[title])\n    }\n  }\n\n  const formatTitle = s => {\n    const split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ')\n    return split.charAt(0).toUpperCase() + split.slice(1)\n  }\n\n  const menu = (\n    <StyledMenu onClick={handleSave}>\n      {options.map((option, i) => (\n        <Menu.Item key={'option' + i}>\n          <StyledCheckbox\n            onChange={() => handleCheck(option)}\n            checked={!!subFilter.find(f => f.id === option.id)}\n          >\n            {option[displayKey]}\n          </StyledCheckbox>\n        </Menu.Item>\n      ))}\n      <Menu.Item key=\"save\">\n        <ApplyButton>Apply</ApplyButton>\n      </Menu.Item>\n    </StyledMenu>\n  )\n\n  return (\n    <Dropdown\n      overlay={menu}\n      onVisibleChange={handleVisibleChange}\n      visible={visible}\n    >\n      <Button>{formatTitle(title)}</Button>\n    </Dropdown>\n  )\n}\n\nexport default PeerDropdownMenu\n"]},"metadata":{},"sourceType":"module"}