{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/timeline/index.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { useQuery, useLazyQuery } from '@apollo/client';\nimport { store } from 'context/store';\nimport styled from 'styled-components';\nimport { Select, Icon } from 'antd';\nimport { StyledSelect } from 'components/common/StyledComponents'; // GQL\n\nimport { GET_SNAPSHOT_INTERVAL_LIST, GET_VISUAL_DECK_LIST } from 'graphql/queries';\nimport { getFilterVariables } from 'helper'; // Project Imports\n\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nconst Option = Select.Option;\nconst Container = styled.div`\n  flex: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`;\nconst ChangeInterval = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst StyledIcon = styled(Icon)`\n  font-size: 2em;\n\n  > svg {\n    color: ${props => props.theme.babyBlue};\n    cursor: pointer;\n  }\n`;\nconst IntervalMeter = styled.div`\n  display: flex;\n  position: relative;\n  width: 90%;\n  height: 10px;\n  border-radius: 3px;\n  background-color: ${props => props.theme.dusk};\n`;\nconst IntervalPosition = styled.div`\n  position: absolute;\n  left: 0;\n  height: 100%;\n  border-radius: 3px;\n  width: ${props => props.width};\n  background-color: ${props => props.theme.babyBlue};\n`;\n\nconst Timeline = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek,\n        peerGroupFilters = state.peerGroupFilters,\n        selectedPeerShip = state.selectedPeerShip,\n        selectedPeerProduct = state.selectedPeerProduct,\n        selectedPeerSailingDates = state.selectedPeerSailingDates,\n        filter = state.filter,\n        peerFilter = state.peerFilter,\n        filterCount = state.filterCount,\n        shipData = state.shipData;\n\n  const _useQuery = useQuery(GET_SNAPSHOT_INTERVAL_LIST, {\n    fetchPolicy: 'network-only'\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const _useLazyQuery = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({\n        type: 'setShipData',\n        value: data.deckVisualList\n      });\n    },\n    fetchPolicy: 'network-only'\n  }),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n        applyFilters = _useLazyQuery2[0];\n\n  const handleSelect = value => {\n    dispatch({\n      type: 'setSelectedBookingWeek',\n      value\n    });\n    applyFilters({\n      variables: getFilterVariables(selectedShip.id, selectedSailDate.id, value, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilter, filterCount)\n    });\n  };\n\n  useEffect(() => {\n    const onCompleted = data => {\n      if (data.snapshotIntervalList.length) {\n        dispatch({\n          type: 'setSelectedBookingWeek',\n          value: data.snapshotIntervalList[data.snapshotIntervalList.length - 1].interval\n        });\n      }\n    };\n\n    const onError = error => {\n      return React.createElement(Notification, {\n        type: \"error\",\n        message: error.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n    };\n\n    if (onCompleted || onError) {\n      if (onCompleted && !loading && !error) {\n        onCompleted(data);\n      } else if (onError && !loading && error) {\n        onError(error);\n      }\n    }\n  }, [loading, data, error, dispatch]);\n\n  const handleStep = dir => {\n    const snapshotIntervalList = data.snapshotIntervalList;\n\n    const getCurrent = snapshot => snapshot.interval === selectedBookingWeek;\n\n    const index = snapshotIntervalList.findIndex(getCurrent);\n\n    if (dir === 'prev' && index !== 0) {\n      const interval = snapshotIntervalList[index - 1].interval;\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      });\n      applyFilters({\n        variables: getFilterVariables(selectedShip.id, selectedSailDate.id, interval, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilter, filterCount)\n      });\n    }\n\n    if (dir === 'next' && index !== snapshotIntervalList.length - 1) {\n      const interval = snapshotIntervalList[index + 1].interval;\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      });\n      applyFilters({\n        variables: getFilterVariables(selectedShip.id, selectedSailDate.id, interval, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilter, filterCount)\n      });\n    }\n  };\n\n  const getWidth = () => {\n    const snapshotIntervalList = data.snapshotIntervalList;\n    const total = snapshotIntervalList[0].interval;\n    return `${(1 - selectedBookingWeek / total) * 100}%`;\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  });\n\n  if (error) {\n    return React.createElement(Notification, {\n      type: \"error\",\n      message: error.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    });\n  }\n\n  return Object.entries(shipData).length > 0 && React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(ChangeInterval, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(StyledIcon, {\n    type: \"caret-left\",\n    onClick: () => handleStep('prev'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), React.createElement(StyledSelect, {\n    style: {\n      width: 250\n    },\n    value: selectedBookingWeek,\n    onChange: handleSelect,\n    timeline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, data.snapshotIntervalList.map((snapshot, i) => React.createElement(Option, {\n    value: snapshot.interval,\n    key: 'interval' + i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, snapshot.intervalLabel + ' to departure'))), React.createElement(StyledIcon, {\n    type: \"caret-right\",\n    onClick: () => handleStep('next'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  })), React.createElement(IntervalMeter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(IntervalPosition, {\n    width: getWidth(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })));\n};\n\nexport default Timeline;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/timeline/index.js"],"names":["React","useContext","useEffect","useQuery","useLazyQuery","store","styled","Select","Icon","StyledSelect","GET_SNAPSHOT_INTERVAL_LIST","GET_VISUAL_DECK_LIST","getFilterVariables","Loader","Notification","Option","Container","div","ChangeInterval","StyledIcon","props","theme","babyBlue","IntervalMeter","dusk","IntervalPosition","width","Timeline","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","shipData","fetchPolicy","loading","error","data","onCompleted","type","value","deckVisualList","applyFilters","handleSelect","variables","id","snapshotIntervalList","length","interval","onError","message","handleStep","dir","getCurrent","snapshot","index","findIndex","getWidth","total","Object","entries","map","i","intervalLabel"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,gBAAvC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,YAAT,QAA6B,oCAA7B,C,CAEA;;AACA,SACEC,0BADF,EAEEC,oBAFF,QAGO,iBAHP;AAIA,SAASC,kBAAT,QAAmC,QAAnC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;MAEQC,M,GAAWR,M,CAAXQ,M;AAER,MAAMC,SAAS,GAAGV,MAAM,CAACW,GAAI;;;;;;CAA7B;AAQA,MAAMC,cAAc,GAAGZ,MAAM,CAACW,GAAI;;;;CAAlC;AAMA,MAAME,UAAU,GAAGb,MAAM,CAACE,IAAD,CAAO;;;;aAInBY,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QAAS;;;CAJ3C;AASA,MAAMC,aAAa,GAAGjB,MAAM,CAACW,GAAI;;;;;;sBAMXG,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYG,IAAK;CANhD;AASA,MAAMC,gBAAgB,GAAGnB,MAAM,CAACW,GAAI;;;;;WAKzBG,KAAK,IAAIA,KAAK,CAACM,KAAM;sBACVN,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QAAS;CANpD;;AASA,MAAMK,QAAQ,GAAG,MAAM;AACrB,QAAMC,WAAW,GAAG3B,UAAU,CAACI,KAAD,CAA9B;AADqB,QAEbwB,KAFa,GAEOD,WAFP,CAEbC,KAFa;AAAA,QAENC,QAFM,GAEOF,WAFP,CAENE,QAFM;AAAA,QAInBC,YAJmB,GAiBjBF,KAjBiB,CAInBE,YAJmB;AAAA,QAKnBC,eALmB,GAiBjBH,KAjBiB,CAKnBG,eALmB;AAAA,QAMnBC,iBANmB,GAiBjBJ,KAjBiB,CAMnBI,iBANmB;AAAA,QAOnBC,gBAPmB,GAiBjBL,KAjBiB,CAOnBK,gBAPmB;AAAA,QAQnBC,mBARmB,GAiBjBN,KAjBiB,CAQnBM,mBARmB;AAAA,QASnBC,gBATmB,GAiBjBP,KAjBiB,CASnBO,gBATmB;AAAA,QAUnBC,gBAVmB,GAiBjBR,KAjBiB,CAUnBQ,gBAVmB;AAAA,QAWnBC,mBAXmB,GAiBjBT,KAjBiB,CAWnBS,mBAXmB;AAAA,QAYnBC,wBAZmB,GAiBjBV,KAjBiB,CAYnBU,wBAZmB;AAAA,QAanBC,MAbmB,GAiBjBX,KAjBiB,CAanBW,MAbmB;AAAA,QAcnBC,UAdmB,GAiBjBZ,KAjBiB,CAcnBY,UAdmB;AAAA,QAenBC,WAfmB,GAiBjBb,KAjBiB,CAenBa,WAfmB;AAAA,QAgBnBC,QAhBmB,GAiBjBd,KAjBiB,CAgBnBc,QAhBmB;;AAAA,oBAmBYxC,QAAQ,CAACO,0BAAD,EAA6B;AACpEkC,IAAAA,WAAW,EAAE;AADuD,GAA7B,CAnBpB;AAAA,QAmBbC,OAnBa,aAmBbA,OAnBa;AAAA,QAmBJC,KAnBI,aAmBJA,KAnBI;AAAA,QAmBGC,IAnBH,aAmBGA,IAnBH;;AAAA,wBAuBE3C,YAAY,CAACO,oBAAD,EAAuB;AACxDqC,IAAAA,WAAW,EAAED,IAAI,IAAI;AACnBjB,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAAnC,OAAD,CAAR;AACD,KAHuD;AAIxDP,IAAAA,WAAW,EAAE;AAJ2C,GAAvB,CAvBd;AAAA;AAAA,QAuBdQ,YAvBc;;AA8BrB,QAAMC,YAAY,GAAGH,KAAK,IAAI;AAC5BpB,IAAAA,QAAQ,CAAC;AAAEmB,MAAAA,IAAI,EAAE,wBAAR;AAAkCC,MAAAA;AAAlC,KAAD,CAAR;AAEAE,IAAAA,YAAY,CAAC;AACXE,MAAAA,SAAS,EAAE1C,kBAAkB,CAC3BmB,YAAY,CAACwB,EADc,EAE3BrB,gBAAgB,CAACqB,EAFU,EAG3BL,KAH2B,EAI3BlB,eAAe,CAACuB,EAJW,EAK3BtB,iBAAiB,CAACsB,EALS,EAM3BnB,gBAN2B,EAO3BC,gBAP2B,EAQ3BC,mBAAmB,CAACiB,EARO,EAS3BhB,wBAAwB,CAAC,CAAD,CATG,EAU3BA,wBAAwB,CAAC,CAAD,CAVG,EAW3BC,MAX2B,EAY3BC,UAZ2B,EAa3BC,WAb2B;AADlB,KAAD,CAAZ;AAiBD,GApBD;;AAsBAxC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8C,WAAW,GAAGD,IAAI,IAAI;AAC1B,UAAIA,IAAI,CAACS,oBAAL,CAA0BC,MAA9B,EAAsC;AACpC3B,QAAAA,QAAQ,CAAC;AACPmB,UAAAA,IAAI,EAAE,wBADC;AAEPC,UAAAA,KAAK,EACHH,IAAI,CAACS,oBAAL,CAA0BT,IAAI,CAACS,oBAAL,CAA0BC,MAA1B,GAAmC,CAA7D,EACGC;AAJE,SAAD,CAAR;AAMD;AACF,KATD;;AAUA,UAAMC,OAAO,GAAGb,KAAK,IAAI;AACvB,aAAO,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,OAAO,EAAEA,KAAK,CAACc,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD;;AAGA,QAAIZ,WAAW,IAAIW,OAAnB,EAA4B;AAC1B,UAAIX,WAAW,IAAI,CAACH,OAAhB,IAA2B,CAACC,KAAhC,EAAuC;AACrCE,QAAAA,WAAW,CAACD,IAAD,CAAX;AACD,OAFD,MAEO,IAAIY,OAAO,IAAI,CAACd,OAAZ,IAAuBC,KAA3B,EAAkC;AACvCa,QAAAA,OAAO,CAACb,KAAD,CAAP;AACD;AACF;AACF,GArBQ,EAqBN,CAACD,OAAD,EAAUE,IAAV,EAAgBD,KAAhB,EAAuBhB,QAAvB,CArBM,CAAT;;AAuBA,QAAM+B,UAAU,GAAGC,GAAG,IAAI;AAAA,UAChBN,oBADgB,GACST,IADT,CAChBS,oBADgB;;AAGxB,UAAMO,UAAU,GAAGC,QAAQ,IAAIA,QAAQ,CAACN,QAAT,KAAsBvB,mBAArD;;AACA,UAAM8B,KAAK,GAAGT,oBAAoB,CAACU,SAArB,CAA+BH,UAA/B,CAAd;;AAEA,QAAID,GAAG,KAAK,MAAR,IAAkBG,KAAK,KAAK,CAAhC,EAAmC;AACjC,YAAMP,QAAQ,GAAGF,oBAAoB,CAACS,KAAK,GAAG,CAAT,CAApB,CAAgCP,QAAjD;AACA5B,MAAAA,QAAQ,CAAC;AACPmB,QAAAA,IAAI,EAAE,wBADC;AAEPC,QAAAA,KAAK,EAAEQ;AAFA,OAAD,CAAR;AAKAN,MAAAA,YAAY,CAAC;AACXE,QAAAA,SAAS,EAAE1C,kBAAkB,CAC3BmB,YAAY,CAACwB,EADc,EAE3BrB,gBAAgB,CAACqB,EAFU,EAG3BG,QAH2B,EAI3B1B,eAAe,CAACuB,EAJW,EAK3BtB,iBAAiB,CAACsB,EALS,EAM3BnB,gBAN2B,EAO3BC,gBAP2B,EAQ3BC,mBAAmB,CAACiB,EARO,EAS3BhB,wBAAwB,CAAC,CAAD,CATG,EAU3BA,wBAAwB,CAAC,CAAD,CAVG,EAW3BC,MAX2B,EAY3BC,UAZ2B,EAa3BC,WAb2B;AADlB,OAAD,CAAZ;AAiBD;;AACD,QAAIoB,GAAG,KAAK,MAAR,IAAkBG,KAAK,KAAKT,oBAAoB,CAACC,MAArB,GAA8B,CAA9D,EAAiE;AAC/D,YAAMC,QAAQ,GAAGF,oBAAoB,CAACS,KAAK,GAAG,CAAT,CAApB,CAAgCP,QAAjD;AACA5B,MAAAA,QAAQ,CAAC;AACPmB,QAAAA,IAAI,EAAE,wBADC;AAEPC,QAAAA,KAAK,EAAEQ;AAFA,OAAD,CAAR;AAIAN,MAAAA,YAAY,CAAC;AACXE,QAAAA,SAAS,EAAE1C,kBAAkB,CAC3BmB,YAAY,CAACwB,EADc,EAE3BrB,gBAAgB,CAACqB,EAFU,EAG3BG,QAH2B,EAI3B1B,eAAe,CAACuB,EAJW,EAK3BtB,iBAAiB,CAACsB,EALS,EAM3BnB,gBAN2B,EAO3BC,gBAP2B,EAQ3BC,mBAAmB,CAACiB,EARO,EAS3BhB,wBAAwB,CAAC,CAAD,CATG,EAU3BA,wBAAwB,CAAC,CAAD,CAVG,EAW3BC,MAX2B,EAY3BC,UAZ2B,EAa3BC,WAb2B;AADlB,OAAD,CAAZ;AAiBD;AACF,GAvDD;;AAyDA,QAAMyB,QAAQ,GAAG,MAAM;AAAA,UACbX,oBADa,GACYT,IADZ,CACbS,oBADa;AAErB,UAAMY,KAAK,GAAGZ,oBAAoB,CAAC,CAAD,CAApB,CAAwBE,QAAtC;AAEA,WAAQ,GAAE,CAAC,IAAIvB,mBAAmB,GAAGiC,KAA3B,IAAoC,GAAI,GAAlD;AACD,GALD;;AAOA,MAAIvB,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;;AACb,MAAIC,KAAJ,EAAW;AACT,WAAO,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,OAAO,EAAEA,KAAK,CAACc,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACES,MAAM,CAACC,OAAP,CAAe3B,QAAf,EAAyBc,MAAzB,GAAkC,CAAlC,IACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,YAAjB;AAA8B,IAAA,OAAO,EAAE,MAAMI,UAAU,CAAC,MAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE;AAAEnC,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,KAAK,EAAES,mBAFT;AAGE,IAAA,QAAQ,EAAEkB,YAHZ;AAIE,IAAA,QAAQ,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGN,IAAI,CAACS,oBAAL,CAA0Be,GAA1B,CAA8B,CAACP,QAAD,EAAWQ,CAAX,KAC7B,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAER,QAAQ,CAACN,QAAxB;AAAkC,IAAA,GAAG,EAAE,aAAac,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,QAAQ,CAACS,aAAT,GAAyB,eAD5B,CADD,CANH,CAFF,EAcE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,aAAjB;AAA+B,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,MAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF,EAiBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEM,QAAQ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBF,CAFJ;AAyBD,CAxKD;;AA0KA,eAAexC,QAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { Select, Icon } from 'antd'\nimport { StyledSelect } from 'components/common/StyledComponents'\n\n// GQL\nimport {\n  GET_SNAPSHOT_INTERVAL_LIST,\n  GET_VISUAL_DECK_LIST\n} from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\n// Project Imports\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst { Option } = Select\n\nconst Container = styled.div`\n  flex: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst ChangeInterval = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst StyledIcon = styled(Icon)`\n  font-size: 2em;\n\n  > svg {\n    color: ${props => props.theme.babyBlue};\n    cursor: pointer;\n  }\n`\n\nconst IntervalMeter = styled.div`\n  display: flex;\n  position: relative;\n  width: 90%;\n  height: 10px;\n  border-radius: 3px;\n  background-color: ${props => props.theme.dusk};\n`\n\nconst IntervalPosition = styled.div`\n  position: absolute;\n  left: 0;\n  height: 100%;\n  border-radius: 3px;\n  width: ${props => props.width};\n  background-color: ${props => props.theme.babyBlue};\n`\n\nconst Timeline = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount,\n    shipData\n  } = state\n\n  const { loading, error, data } = useQuery(GET_SNAPSHOT_INTERVAL_LIST, {\n    fetchPolicy: 'network-only'\n  })\n\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const handleSelect = value => {\n    dispatch({ type: 'setSelectedBookingWeek', value })\n\n    applyFilters({\n      variables: getFilterVariables(\n        selectedShip.id,\n        selectedSailDate.id,\n        value,\n        selectedProduct.id,\n        selectedItinerary.id,\n        peerGroupFilters,\n        selectedPeerShip,\n        selectedPeerProduct.id,\n        selectedPeerSailingDates[0],\n        selectedPeerSailingDates[1],\n        filter,\n        peerFilter,\n        filterCount\n      )\n    })\n  }\n\n  useEffect(() => {\n    const onCompleted = data => {\n      if (data.snapshotIntervalList.length) {\n        dispatch({\n          type: 'setSelectedBookingWeek',\n          value:\n            data.snapshotIntervalList[data.snapshotIntervalList.length - 1]\n              .interval\n        })\n      }\n    }\n    const onError = error => {\n      return <Notification type=\"error\" message={error.message} />\n    }\n    if (onCompleted || onError) {\n      if (onCompleted && !loading && !error) {\n        onCompleted(data)\n      } else if (onError && !loading && error) {\n        onError(error)\n      }\n    }\n  }, [loading, data, error, dispatch])\n\n  const handleStep = dir => {\n    const { snapshotIntervalList } = data\n\n    const getCurrent = snapshot => snapshot.interval === selectedBookingWeek\n    const index = snapshotIntervalList.findIndex(getCurrent)\n\n    if (dir === 'prev' && index !== 0) {\n      const interval = snapshotIntervalList[index - 1].interval\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      })\n\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          interval,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilter,\n          filterCount\n        )\n      })\n    }\n    if (dir === 'next' && index !== snapshotIntervalList.length - 1) {\n      const interval = snapshotIntervalList[index + 1].interval\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      })\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          interval,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilter,\n          filterCount\n        )\n      })\n    }\n  }\n\n  const getWidth = () => {\n    const { snapshotIntervalList } = data\n    const total = snapshotIntervalList[0].interval\n\n    return `${(1 - selectedBookingWeek / total) * 100}%`\n  }\n\n  if (loading) return <Loader />\n  if (error) {\n    return <Notification type=\"error\" message={error.message} />\n  }\n  return (\n    Object.entries(shipData).length > 0 && (\n      <Container>\n        <ChangeInterval>\n          <StyledIcon type=\"caret-left\" onClick={() => handleStep('prev')} />\n          <StyledSelect\n            style={{ width: 250 }}\n            value={selectedBookingWeek}\n            onChange={handleSelect}\n            timeline\n          >\n            {data.snapshotIntervalList.map((snapshot, i) => (\n              <Option value={snapshot.interval} key={'interval' + i}>\n                {snapshot.intervalLabel + ' to departure'}\n              </Option>\n            ))}\n          </StyledSelect>\n          <StyledIcon type=\"caret-right\" onClick={() => handleStep('next')} />\n        </ChangeInterval>\n        <IntervalMeter>\n          <IntervalPosition width={getWidth()} />\n        </IntervalMeter>\n      </Container>\n    )\n  )\n}\n\nexport default Timeline\n"]},"metadata":{},"sourceType":"module"}