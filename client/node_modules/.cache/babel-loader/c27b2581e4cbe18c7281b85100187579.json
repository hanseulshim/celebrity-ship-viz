{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/Decks.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client';\nimport { GET_DECK_CHART } from 'graphql/queries';\nimport { deckLayout } from './config';\nimport { createDecks } from './helper';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport Plot from 'react-plotly.js';\nimport decksBlurry from 'assets/decksBlurry.png';\nconst Blurry = styled.img`\n  width: 400px;\n`;\n\nconst Decks = () => {\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedShip = state.selectedShip,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek;\n\n  const _useQuery = useQuery(GET_DECK_CHART, {\n    variables: {\n      shipId: selectedShip.id,\n      sailingDateId: selectedSailDate.id,\n      interval: selectedBookingWeek\n    },\n    skip: !selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null,\n    fetchPolicy: 'network-only'\n  }),\n        networkStatus = _useQuery.networkStatus,\n        error = _useQuery.error,\n        data = _useQuery.data; // local state for plot data\n\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        plotData = _useState2[0],\n        setPlotdata = _useState2[1];\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.deckChart);\n      const barData = bars.filter(v => v !== '__typename' && v !== 'y').map(bar => createDecks(data.deckChart[bar], bar, data.deckChart.y));\n      setPlotdata(barData);\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data, networkStatus]);\n\n  if (!selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null) {\n    return React.createElement(Blurry, {\n      src: decksBlurry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }\n\n  if (networkStatus !== 2 && networkStatus !== 7) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Plot, {\n    data: plotData,\n    layout: deckLayout,\n    config: {\n      displayModeBar: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nexport default Decks;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/Decks.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_DECK_CHART","deckLayout","createDecks","Loader","Notification","Plot","decksBlurry","Blurry","img","Decks","globalState","state","selectedShip","selectedSailDate","selectedBookingWeek","variables","shipId","id","sailingDateId","interval","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","bars","Object","keys","deckChart","barData","filter","v","map","bar","y","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_DECK_CHART } from 'graphql/queries'\nimport { deckLayout } from './config'\nimport { createDecks } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport decksBlurry from 'assets/decksBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst Decks = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedShip, selectedSailDate, selectedBookingWeek } = state\n\n  const { networkStatus, error, data } = useQuery(GET_DECK_CHART, {\n    variables: {\n      shipId: selectedShip.id,\n      sailingDateId: selectedSailDate.id,\n      interval: selectedBookingWeek\n    },\n    skip:\n      !selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.deckChart)\n      const barData = bars\n        .filter(v => v !== '__typename' && v !== 'y')\n        .map(bar => createDecks(data.deckChart[bar], bar, data.deckChart.y))\n      setPlotdata(barData)\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data, networkStatus])\n\n  if (\n    !selectedShip.id ||\n    !selectedSailDate.id ||\n    selectedBookingWeek === null\n  ) {\n    return <Blurry src={decksBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={deckLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default Decks\n"]},"metadata":{},"sourceType":"module"}