{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/charts/SupplyBurndown.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client';\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries';\nimport { supplyBurndownLayout } from './config';\nimport { createSupplyBurndown } from './helper';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport Plot from 'react-plotly.js';\nimport { getFilterVariables } from 'helper';\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png';\nconst Blurry = styled.img`\n\twidth: 400px;\n`;\n\nconst SupplyBurndown = () => {\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek,\n        peerGroupFilters = state.peerGroupFilters,\n        selectedPeerShip = state.selectedPeerShip,\n        selectedPeerProduct = state.selectedPeerProduct,\n        selectedPeerSailingDates = state.selectedPeerSailingDates,\n        filter = state.filter,\n        peerFilter = state.peerFilter,\n        filterCount = state.filterCount;\n\n  const _useQuery = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n    variables: getFilterVariables(selectedShip.id, selectedSailDate.sailingDate, selectedBookingWeek, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilter, filterCount),\n    skip: !selectedShip.id || !selectedSailDate.sailingDate,\n    fetchPolicy: 'network-only'\n  }),\n        networkStatus = _useQuery.networkStatus,\n        error = _useQuery.error,\n        data = _useQuery.data; // local state for plot data\n\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        plotData = _useState2[0],\n        setPlotdata = _useState2[1];\n\n  useEffect(() => {\n    if (data) {\n      const lines = Object.keys(data.supplyBurndownChart);\n      const lineData = lines.filter(v => v !== '__typename').map(line => createSupplyBurndown(data.supplyBurndownChart[line], line, selectedShip.shipName));\n      setPlotdata(lineData);\n    }\n  }, [selectedShip, selectedSailDate, data]);\n\n  if (!selectedShip.id || !selectedSailDate.sailingDate) {\n    return React.createElement(Blurry, {\n      src: supplyBurndownBlurry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n  if (networkStatus !== 2 && networkStatus !== 7) {\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  }\n\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Plot, {\n    data: plotData,\n    layout: supplyBurndownLayout,\n    config: {\n      displayModeBar: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default SupplyBurndown;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/charts/SupplyBurndown.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_SUPPLY_BURNDOWN_CHART","supplyBurndownLayout","createSupplyBurndown","Loader","Notification","Plot","getFilterVariables","supplyBurndownBlurry","Blurry","img","SupplyBurndown","globalState","state","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","variables","id","sailingDate","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","lines","Object","keys","supplyBurndownChart","lineData","v","map","line","shipName","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries'\nimport { supplyBurndownLayout } from './config'\nimport { createSupplyBurndown } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport { getFilterVariables } from 'helper'\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png'\n\nconst Blurry = styled.img`\n\twidth: 400px;\n`\n\nconst SupplyBurndown = () => {\n\tconst globalState = useContext(store)\n\tconst { state } = globalState\n\tconst {\n\t\tselectedShip,\n\t\tselectedProduct,\n\t\tselectedItinerary,\n\t\tselectedSailDate,\n\t\tselectedBookingWeek,\n\t\tpeerGroupFilters,\n\t\tselectedPeerShip,\n\t\tselectedPeerProduct,\n\t\tselectedPeerSailingDates,\n\t\tfilter,\n\t\tpeerFilter,\n\t\tfilterCount\n\t} = state\n\n\tconst { networkStatus, error, data } = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n\t\tvariables: getFilterVariables(\n\t\t\tselectedShip.id,\n\t\t\tselectedSailDate.sailingDate,\n\t\t\tselectedBookingWeek,\n\t\t\tselectedProduct.id,\n\t\t\tselectedItinerary.id,\n\t\t\tpeerGroupFilters,\n\t\t\tselectedPeerShip,\n\t\t\tselectedPeerProduct.id,\n\t\t\tselectedPeerSailingDates[0],\n\t\t\tselectedPeerSailingDates[1],\n\t\t\tfilter,\n\t\t\tpeerFilter,\n\t\t\tfilterCount\n\t\t),\n\t\tskip: !selectedShip.id || !selectedSailDate.sailingDate,\n\t\tfetchPolicy: 'network-only'\n\t})\n\n\t// local state for plot data\n\tconst [plotData, setPlotdata] = useState([])\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tconst lines = Object.keys(data.supplyBurndownChart)\n\t\t\tconst lineData = lines\n\t\t\t\t.filter((v) => v !== '__typename')\n\t\t\t\t.map((line) =>\n\t\t\t\t\tcreateSupplyBurndown(\n\t\t\t\t\t\tdata.supplyBurndownChart[line],\n\t\t\t\t\t\tline,\n\t\t\t\t\t\tselectedShip.shipName\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\tsetPlotdata(lineData)\n\t\t}\n\t}, [selectedShip, selectedSailDate, data])\n\n\tif (!selectedShip.id || !selectedSailDate.sailingDate) {\n\t\treturn <Blurry src={supplyBurndownBlurry} />\n\t}\n\tif (networkStatus !== 2 && networkStatus !== 7) {\n\t\treturn <Loader />\n\t}\n\tif (error) return <Notification type=\"error\" message={error.message} />\n\treturn (\n\t\t<>\n\t\t\t<Plot\n\t\t\t\tdata={plotData}\n\t\t\t\tlayout={supplyBurndownLayout}\n\t\t\t\tconfig={{ displayModeBar: false }}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default SupplyBurndown\n"]},"metadata":{},"sourceType":"module"}