{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/main-filters/SelectSailDate.js\";\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { store } from 'context/store'; // Project Components\n\nimport FilterSelect from 'components/common/FilterSelect';\nimport Notification from 'components/common/Notification';\nimport Loader from 'components/common/Loader'; // GQL\n\nimport { GET_SAILING_DATE_LIST } from 'graphql/queries';\n\nconst SelectSailDate = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate;\n\n  const _useQuery = useQuery(GET_SAILING_DATE_LIST, {\n    variables: {\n      shipId: selectedShip.id,\n      productId: selectedProduct.id,\n      itineraryId: selectedItinerary.id\n    },\n    fetchPolicy: 'network-only'\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const onChange = value => {\n    const sailDate = data.sailingDateList.find(date => date.id === value);\n    dispatch({\n      type: 'setSelectedSailDate',\n      value: sailDate\n    });\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n  return React.createElement(FilterSelect, {\n    label: \"Sail Date\",\n    displayKey: \"sailingDate\",\n    options: data.sailingDateList,\n    value: selectedSailDate.id,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n};\n\nexport default SelectSailDate;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/main-filters/SelectSailDate.js"],"names":["React","useContext","useQuery","store","FilterSelect","Notification","Loader","GET_SAILING_DATE_LIST","SelectSailDate","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","variables","shipId","id","productId","itineraryId","fetchPolicy","loading","error","data","onChange","value","sailDate","sailingDateList","find","date","type","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,SAASC,qBAAT,QAAsC,iBAAtC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,WAAW,GAAGR,UAAU,CAACE,KAAD,CAA9B;AAD2B,QAEnBO,KAFmB,GAECD,WAFD,CAEnBC,KAFmB;AAAA,QAEZC,QAFY,GAECF,WAFD,CAEZE,QAFY;AAAA,QAIzBC,YAJyB,GAQvBF,KARuB,CAIzBE,YAJyB;AAAA,QAKzBC,eALyB,GAQvBH,KARuB,CAKzBG,eALyB;AAAA,QAMzBC,iBANyB,GAQvBJ,KARuB,CAMzBI,iBANyB;AAAA,QAOzBC,gBAPyB,GAQvBL,KARuB,CAOzBK,gBAPyB;;AAAA,oBAUMb,QAAQ,CAACK,qBAAD,EAAwB;AAC/DS,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAEL,YAAY,CAACM,EADZ;AAETC,MAAAA,SAAS,EAAEN,eAAe,CAACK,EAFlB;AAGTE,MAAAA,WAAW,EAAEN,iBAAiB,CAACI;AAHtB,KADoD;AAM/DG,IAAAA,WAAW,EAAE;AANkD,GAAxB,CAVd;AAAA,QAUnBC,OAVmB,aAUnBA,OAVmB;AAAA,QAUVC,KAVU,aAUVA,KAVU;AAAA,QAUHC,IAVG,aAUHA,IAVG;;AAmB3B,QAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,UAAMC,QAAQ,GAAGH,IAAI,CAACI,eAAL,CAAqBC,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACZ,EAAL,KAAYQ,KAA9C,CAAjB;AACAf,IAAAA,QAAQ,CAAC;AAAEoB,MAAAA,IAAI,EAAE,qBAAR;AAA+BL,MAAAA,KAAK,EAAEC;AAAtC,KAAD,CAAR;AACD,GAHD;;AAKA,MAAIL,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACS,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,UAAU,EAAC,aAFb;AAGE,IAAA,OAAO,EAAER,IAAI,CAACI,eAHhB;AAIE,IAAA,KAAK,EAAEb,gBAAgB,CAACG,EAJ1B;AAKE,IAAA,QAAQ,EAAEO,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAnCD;;AAqCA,eAAejB,cAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SAILING_DATE_LIST } from 'graphql/queries'\n\nconst SelectSailDate = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate\n  } = state\n\n  const { loading, error, data } = useQuery(GET_SAILING_DATE_LIST, {\n    variables: {\n      shipId: selectedShip.id,\n      productId: selectedProduct.id,\n      itineraryId: selectedItinerary.id\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = value => {\n    const sailDate = data.sailingDateList.find(date => date.id === value)\n    dispatch({ type: 'setSelectedSailDate', value: sailDate })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Sail Date\"\n      displayKey=\"sailingDate\"\n      options={data.sailingDateList}\n      value={selectedSailDate.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectSailDate\n"]},"metadata":{},"sourceType":"module"}