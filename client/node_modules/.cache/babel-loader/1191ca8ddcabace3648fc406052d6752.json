{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/main-filters/SelectItinerary.js\";\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { store } from 'context/store'; // Project Components\n\nimport FilterSelect from 'components/common/FilterSelect'; // GQL\n\nimport { GET_ITINERARY_LIST } from 'graphql/queries';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\n\nconst SelectItinerary = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary;\n\n  const _useQuery = useQuery(GET_ITINERARY_LIST, {\n    variables: {\n      shipId: selectedShip.id,\n      productId: selectedProduct.id\n    },\n    fetchPolicy: 'network-only'\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const onChange = id => {\n    const itinerary = data.itineraryList.find(itinerary => itinerary.id === id);\n    dispatch({\n      type: 'setSelectedItinerary',\n      value: itinerary\n    });\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n  return React.createElement(FilterSelect, {\n    label: \"Itinerary\",\n    displayKey: \"itineraryDesc\",\n    options: data.itineraryList,\n    value: selectedItinerary.id,\n    onChange: onChange,\n    width: 250,\n    disabled: !selectedProduct.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n};\n\nexport default SelectItinerary;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/main-filters/SelectItinerary.js"],"names":["React","useContext","useQuery","store","FilterSelect","GET_ITINERARY_LIST","Loader","Notification","SelectItinerary","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","variables","shipId","id","productId","fetchPolicy","loading","error","data","onChange","itinerary","itineraryList","find","type","value","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,gCAAzB,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAMC,WAAW,GAAGR,UAAU,CAACE,KAAD,CAA9B;AAD4B,QAEpBO,KAFoB,GAEAD,WAFA,CAEpBC,KAFoB;AAAA,QAEbC,QAFa,GAEAF,WAFA,CAEbE,QAFa;AAAA,QAGpBC,YAHoB,GAGiCF,KAHjC,CAGpBE,YAHoB;AAAA,QAGNC,eAHM,GAGiCH,KAHjC,CAGNG,eAHM;AAAA,QAGWC,iBAHX,GAGiCJ,KAHjC,CAGWI,iBAHX;;AAAA,oBAKKZ,QAAQ,CAACG,kBAAD,EAAqB;AAC5DU,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEJ,YAAY,CAACK,EAAvB;AAA2BC,MAAAA,SAAS,EAAEL,eAAe,CAACI;AAAtD,KADiD;AAE5DE,IAAAA,WAAW,EAAE;AAF+C,GAArB,CALb;AAAA,QAKpBC,OALoB,aAKpBA,OALoB;AAAA,QAKXC,KALW,aAKXA,KALW;AAAA,QAKJC,IALI,aAKJA,IALI;;AAU5B,QAAMC,QAAQ,GAAGN,EAAE,IAAI;AACrB,UAAMO,SAAS,GAAGF,IAAI,CAACG,aAAL,CAAmBC,IAAnB,CAAwBF,SAAS,IAAIA,SAAS,CAACP,EAAV,KAAiBA,EAAtD,CAAlB;AACAN,IAAAA,QAAQ,CAAC;AAAEgB,MAAAA,IAAI,EAAE,sBAAR;AAAgCC,MAAAA,KAAK,EAAEJ;AAAvC,KAAD,CAAR;AACD,GAHD;;AAKA,MAAIJ,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACQ,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,UAAU,EAAC,eAFb;AAGE,IAAA,OAAO,EAAEP,IAAI,CAACG,aAHhB;AAIE,IAAA,KAAK,EAAEX,iBAAiB,CAACG,EAJ3B;AAKE,IAAA,QAAQ,EAAEM,QALZ;AAME,IAAA,KAAK,EAAE,GANT;AAOE,IAAA,QAAQ,EAAE,CAACV,eAAe,CAACI,EAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CA5BD;;AA8BA,eAAeT,eAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_ITINERARY_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectItinerary = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip, selectedProduct, selectedItinerary } = state\n\n  const { loading, error, data } = useQuery(GET_ITINERARY_LIST, {\n    variables: { shipId: selectedShip.id, productId: selectedProduct.id },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const itinerary = data.itineraryList.find(itinerary => itinerary.id === id)\n    dispatch({ type: 'setSelectedItinerary', value: itinerary })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Itinerary\"\n      displayKey=\"itineraryDesc\"\n      options={data.itineraryList}\n      value={selectedItinerary.id}\n      onChange={onChange}\n      width={250}\n      disabled={!selectedProduct.id}\n    />\n  )\n}\n\nexport default SelectItinerary\n"]},"metadata":{},"sourceType":"module"}