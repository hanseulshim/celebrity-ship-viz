{"ast":null,"code":"import _slicedToArray from\"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: 400px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useContext,useEffect}from'react';import styled from'styled-components';import{store}from'context/store';import{useQuery}from'@apollo/client';import{GET_DECK_CHART}from'graphql/queries';import{deckLayout}from'./config';import{createDecks}from'./helper';import Loader from'components/common/Loader';import Notification from'components/common/Notification';import Plot from'react-plotly.js';import decksBlurry from'assets/decksBlurry.png';var Blurry=styled.img(_templateObject());var Decks=function Decks(){var globalState=useContext(store);var state=globalState.state;var selectedShip=state.selectedShip,selectedSailDate=state.selectedSailDate,selectedBookingWeek=state.selectedBookingWeek;var _useQuery=useQuery(GET_DECK_CHART,{variables:{shipId:selectedShip.id,sailingDateId:selectedSailDate.id,interval:selectedBookingWeek},skip:!selectedShip.id||!selectedSailDate.id||selectedBookingWeek===null,fetchPolicy:'network-only'}),networkStatus=_useQuery.networkStatus,error=_useQuery.error,data=_useQuery.data;// local state for plot data\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),plotData=_useState2[0],setPlotdata=_useState2[1];useEffect(function(){if(data){var bars=Object.keys(data.deckChart);var barData=bars.filter(function(v){return v!=='__typename'&&v!=='y';}).map(function(bar){return createDecks(data.deckChart[bar],bar,data.deckChart.y);});setPlotdata(barData);}},[selectedShip,selectedSailDate,selectedBookingWeek,data,networkStatus]);if(!selectedShip.id||!selectedSailDate.id||selectedBookingWeek===null){return React.createElement(Blurry,{src:decksBlurry});}if(networkStatus!==2&&networkStatus!==7)return React.createElement(Loader,null);if(error)return React.createElement(Notification,{type:\"error\",message:error.message});return React.createElement(React.Fragment,null,React.createElement(Plot,{data:plotData,layout:deckLayout,config:{displayModeBar:false}}));};export default Decks;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/Decks.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_DECK_CHART","deckLayout","createDecks","Loader","Notification","Plot","decksBlurry","Blurry","img","Decks","globalState","state","selectedShip","selectedSailDate","selectedBookingWeek","variables","shipId","id","sailingDateId","interval","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","bars","Object","keys","deckChart","barData","filter","v","map","bar","y","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_DECK_CHART } from 'graphql/queries'\nimport { deckLayout } from './config'\nimport { createDecks } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport decksBlurry from 'assets/decksBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst Decks = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedShip, selectedSailDate, selectedBookingWeek } = state\n\n  const { networkStatus, error, data } = useQuery(GET_DECK_CHART, {\n    variables: {\n      shipId: selectedShip.id,\n      sailingDateId: selectedSailDate.id,\n      interval: selectedBookingWeek\n    },\n    skip:\n      !selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.deckChart)\n      const barData = bars\n        .filter(v => v !== '__typename' && v !== 'y')\n        .map(bar => createDecks(data.deckChart[bar], bar, data.deckChart.y))\n      setPlotdata(barData)\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data, networkStatus])\n\n  if (\n    !selectedShip.id ||\n    !selectedSailDate.id ||\n    selectedBookingWeek === null\n  ) {\n    return <Blurry src={decksBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={deckLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default Decks\n"]},"metadata":{},"sourceType":"module"}