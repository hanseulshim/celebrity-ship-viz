{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/peer-group-filters/PeerSubFilters.js\";\nimport React, { useState, useContext } from 'react';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client';\nimport { GET_SUB_FILTERS } from 'graphql/queries';\nimport styled from 'styled-components';\nimport Button from 'components/common/Button';\nimport Icon from 'components/common/Icon';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport PeerDropdownMenu from './PeerDropdownMenu';\nimport { StyledModal } from 'components/common/StyledComponents';\nconst OpenModal = styled(Button)`\n  background-color: ${props => props.theme.babyBlue};\n  color: ${props => props.theme.black};\n`;\n\nconst PeerSubFilters = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const peerFilter = state.peerFilter,\n        filterCount = state.filterCount;\n\n  const _useQuery = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter).filter(v => v !== '__typename' && v !== 'cabinCategoryClass').forEach(subFilter => {\n        const arr = data.filter[subFilter].map(v => ({\n          id: v.id,\n          value: v.value\n        }));\n        dispatch({\n          type: 'setSelectedPeerSubFilter',\n          title: subFilter,\n          value: arr\n        });\n        dispatch({\n          type: 'setSelectedSubFilterCount',\n          title: subFilter,\n          value: arr.length\n        });\n      });\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const openModal = () => {\n    setVisible(true);\n  };\n\n  const handleApply = () => {\n    setVisible(false);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(OpenModal, {\n    onClick: () => openModal(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, Object.keys(peerFilter).filter(key => {\n    return peerFilter[key].length !== filterCount[key];\n  }).length, ' ', \"Filters \", React.createElement(Icon, {\n    icon: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(StyledModal, {\n    title: \"Peer Group Filters\",\n    visible: visible,\n    onOk: handleApply,\n    onCancel: handleCancel,\n    okText: \"Apply\",\n    footer: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, Object.keys(data.filter).filter(v => v !== '__typename' && v !== 'cabinCategoryClass').map((subFilter, i) => {\n    const options = data.filter[subFilter];\n    return React.createElement(PeerDropdownMenu, {\n      options: options,\n      title: subFilter,\n      key: subFilter + i,\n      displayKey: 'value',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default PeerSubFilters;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/peer-group-filters/PeerSubFilters.js"],"names":["React","useState","useContext","store","useQuery","GET_SUB_FILTERS","styled","Button","Icon","Loader","Notification","PeerDropdownMenu","StyledModal","OpenModal","props","theme","babyBlue","black","PeerSubFilters","globalState","state","dispatch","peerFilter","filterCount","fetchPolicy","onCompleted","data","Object","keys","filter","v","forEach","subFilter","arr","map","id","value","type","title","length","loading","error","visible","setVisible","openModal","handleApply","handleCancel","message","key","i","options"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUB_FILTERS } from 'graphql/queries'\nimport styled from 'styled-components'\nimport Button from 'components/common/Button'\nimport Icon from 'components/common/Icon'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport PeerDropdownMenu from './PeerDropdownMenu'\nimport { StyledModal } from 'components/common/StyledComponents'\n\nconst OpenModal = styled(Button)`\n  background-color: ${props => props.theme.babyBlue};\n  color: ${props => props.theme.black};\n`\n\nconst PeerSubFilters = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { peerFilter, filterCount } = state\n  const { loading, error, data } = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter)\n        .filter(v => v !== '__typename' && v !== 'cabinCategoryClass')\n        .forEach(subFilter => {\n          const arr = data.filter[subFilter].map(v => ({\n            id: v.id,\n            value: v.value\n          }))\n          dispatch({\n            type: 'setSelectedPeerSubFilter',\n            title: subFilter,\n            value: arr\n          })\n          dispatch({\n            type: 'setSelectedSubFilterCount',\n            title: subFilter,\n            value: arr.length\n          })\n        })\n    }\n  })\n\n  const [visible, setVisible] = useState(false)\n\n  const openModal = () => {\n    setVisible(true)\n  }\n\n  const handleApply = () => {\n    setVisible(false)\n  }\n\n  const handleCancel = () => {\n    setVisible(false)\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <OpenModal onClick={() => openModal()}>\n        {\n          Object.keys(peerFilter).filter(key => {\n            return peerFilter[key].length !== filterCount[key]\n          }).length\n        }{' '}\n        Filters <Icon icon=\"edit\" />\n      </OpenModal>\n      <StyledModal\n        title=\"Peer Group Filters\"\n        visible={visible}\n        onOk={handleApply}\n        onCancel={handleCancel}\n        okText=\"Apply\"\n        footer={null}\n      >\n        {Object.keys(data.filter)\n          .filter(v => v !== '__typename' && v !== 'cabinCategoryClass')\n          .map((subFilter, i) => {\n            const options = data.filter[subFilter]\n            return (\n              <PeerDropdownMenu\n                options={options}\n                title={subFilter}\n                key={subFilter + i}\n                displayKey={'value'}\n              />\n            )\n          })}\n      </StyledModal>\n    </>\n  )\n}\n\nexport default PeerSubFilters\n"]},"metadata":{},"sourceType":"module"}