{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/sub-filters/index.js\";\nimport React, { useContext } from 'react';\nimport { store } from 'context/store';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/client'; // Project Components\n\nimport DropdownMenu from './DropdownMenu'; // GQL\n\nimport { GET_SUB_FILTERS } from 'graphql/queries';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  > button {\n    margin-left: 1em;\n  }\n`;\n\nconst SubFilters = () => {\n  const globalState = useContext(store);\n  const dispatch = globalState.dispatch;\n\n  const _useQuery = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter).filter(v => v !== '__typename').forEach(subFilter => {\n        const arr = data.filter[subFilter].map(v => ({\n          id: v.id,\n          value: v.value\n        }));\n        dispatch({\n          type: 'setSelectedSubFilter',\n          title: subFilter,\n          value: arr\n        });\n        dispatch({\n          type: 'setSelectedSubFilterCount',\n          title: subFilter,\n          value: arr.length\n        });\n      });\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, Object.keys(data.filter).filter(v => v !== '__typename').map((subFilter, i) => {\n    const options = data.filter[subFilter];\n    return React.createElement(DropdownMenu, {\n      options: options,\n      title: subFilter,\n      key: subFilter + i,\n      displayKey: 'value',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default SubFilters;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/sub-filters/index.js"],"names":["React","useContext","store","styled","useQuery","DropdownMenu","GET_SUB_FILTERS","Loader","Notification","Container","div","SubFilters","globalState","dispatch","fetchPolicy","onCompleted","data","Object","keys","filter","v","forEach","subFilter","arr","map","id","value","type","title","length","loading","error","message","i","options"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAI;;;;;;;CAA7B;;AAQA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,WAAW,GAAGX,UAAU,CAACC,KAAD,CAA9B;AADuB,QAEfW,QAFe,GAEFD,WAFE,CAEfC,QAFe;;AAAA,oBAGUT,QAAQ,CAACE,eAAD,EAAkB;AACzDQ,IAAAA,WAAW,EAAE,cAD4C;AAEzDC,IAAAA,WAAW,EAAEC,IAAI,IAAI;AACnBC,MAAAA,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,MAAjB,EACGA,MADH,CACUC,CAAC,IAAIA,CAAC,KAAK,YADrB,EAEGC,OAFH,CAEWC,SAAS,IAAI;AACpB,cAAMC,GAAG,GAAGP,IAAI,CAACG,MAAL,CAAYG,SAAZ,EAAuBE,GAAvB,CAA2BJ,CAAC,KAAK;AAAEK,UAAAA,EAAE,EAAEL,CAAC,CAACK,EAAR;AAAYC,UAAAA,KAAK,EAAEN,CAAC,CAACM;AAArB,SAAL,CAA5B,CAAZ;AACAb,QAAAA,QAAQ,CAAC;AACPc,UAAAA,IAAI,EAAE,sBADC;AAEPC,UAAAA,KAAK,EAAEN,SAFA;AAGPI,UAAAA,KAAK,EAAEH;AAHA,SAAD,CAAR;AAKAV,QAAAA,QAAQ,CAAC;AACPc,UAAAA,IAAI,EAAE,2BADC;AAEPC,UAAAA,KAAK,EAAEN,SAFA;AAGPI,UAAAA,KAAK,EAAEH,GAAG,CAACM;AAHJ,SAAD,CAAR;AAKD,OAdH;AAeD;AAlBwD,GAAlB,CAHlB;AAAA,QAGfC,OAHe,aAGfA,OAHe;AAAA,QAGNC,KAHM,aAGNA,KAHM;AAAA,QAGCf,IAHD,aAGCA,IAHD;;AAwBvB,MAAIc,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,MAAjB,EACEA,MADF,CACSC,CAAC,IAAIA,CAAC,KAAK,YADpB,EAEEI,GAFF,CAEM,CAACF,SAAD,EAAYW,CAAZ,KAAkB;AACrB,UAAMC,OAAO,GAAGlB,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAhB;AACA,WACE,oBAAC,YAAD;AACE,MAAA,OAAO,EAAEY,OADX;AAEE,MAAA,KAAK,EAAEZ,SAFT;AAGE,MAAA,GAAG,EAAEA,SAAS,GAAGW,CAHnB;AAIE,MAAA,UAAU,EAAE,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GAZF,CADH,CADF;AAiBD,CA5CD;;AA8CA,eAAetB,UAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport DropdownMenu from './DropdownMenu'\n\n// GQL\nimport { GET_SUB_FILTERS } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  > button {\n    margin-left: 1em;\n  }\n`\nconst SubFilters = () => {\n  const globalState = useContext(store)\n  const { dispatch } = globalState\n  const { loading, error, data } = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .forEach(subFilter => {\n          const arr = data.filter[subFilter].map(v => ({ id: v.id, value: v.value }))\n          dispatch({\n            type: 'setSelectedSubFilter',\n            title: subFilter,\n            value: arr\n          })\n          dispatch({\n            type: 'setSelectedSubFilterCount',\n            title: subFilter,\n            value: arr.length\n          })\n        })\n    }\n  })\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n\n  return (\n    <Container>\n      {Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .map((subFilter, i) => {\n          const options = data.filter[subFilter]\n          return (\n            <DropdownMenu\n              options={options}\n              title={subFilter}\n              key={subFilter + i}\n              displayKey={'value'}\n            />\n          )\n        })}\n    </Container>\n  )\n}\n\nexport default SubFilters\n"]},"metadata":{},"sourceType":"module"}