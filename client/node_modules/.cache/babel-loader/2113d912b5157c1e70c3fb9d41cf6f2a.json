{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: flex-end;\\n\\n  > button {\\n    margin-left: 1em;\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useContext}from'react';import{store}from'context/store';import styled from'styled-components';import{useQuery}from'@apollo/client';// Project Components\nimport DropdownMenu from'./DropdownMenu';// GQL\nimport{GET_SUB_FILTERS}from'graphql/queries';import Loader from'components/common/Loader';import Notification from'components/common/Notification';var Container=styled.div(_templateObject());var SubFilters=function SubFilters(){var globalState=useContext(store);var dispatch=globalState.dispatch;var _useQuery=useQuery(GET_SUB_FILTERS,{fetchPolicy:'network-only',onCompleted:function onCompleted(data){Object.keys(data.filter).filter(function(v){return v!=='__typename';}).forEach(function(subFilter){var arr=data.filter[subFilter].map(function(v){return{id:v.id,value:v.value};});dispatch({type:'setSelectedSubFilter',title:subFilter,value:arr});dispatch({type:'setSelectedSubFilterCount',title:subFilter,value:arr.length});});}}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;if(loading)return React.createElement(Loader,null);if(error)return React.createElement(Notification,{type:\"error\",message:error.message});return React.createElement(Container,null,Object.keys(data.filter).filter(function(v){return v!=='__typename';}).map(function(subFilter,i){var options=data.filter[subFilter];return React.createElement(DropdownMenu,{options:options,title:subFilter,key:subFilter+i,displayKey:'value'});}));};export default SubFilters;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/sub-filters/index.js"],"names":["React","useContext","store","styled","useQuery","DropdownMenu","GET_SUB_FILTERS","Loader","Notification","Container","div","SubFilters","globalState","dispatch","fetchPolicy","onCompleted","data","Object","keys","filter","v","forEach","subFilter","arr","map","id","value","type","title","length","loading","error","message","i","options"],"mappings":"sXAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,QAAT,KAAyB,gBAAzB,CAEA;AACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAEA;AACA,OAASC,eAAT,KAAgC,iBAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA,GAAMC,CAAAA,SAAS,CAAGN,MAAM,CAACO,GAAV,mBAAf,CAQA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAMC,CAAAA,WAAW,CAAGX,UAAU,CAACC,KAAD,CAA9B,CADuB,GAEfW,CAAAA,QAFe,CAEFD,WAFE,CAEfC,QAFe,eAGUT,QAAQ,CAACE,eAAD,CAAkB,CACzDQ,WAAW,CAAE,cAD4C,CAEzDC,WAAW,CAAE,qBAAAC,IAAI,CAAI,CACnBC,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,MAAjB,EACGA,MADH,CACU,SAAAC,CAAC,QAAIA,CAAAA,CAAC,GAAK,YAAV,EADX,EAEGC,OAFH,CAEW,SAAAC,SAAS,CAAI,CACpB,GAAMC,CAAAA,GAAG,CAAGP,IAAI,CAACG,MAAL,CAAYG,SAAZ,EAAuBE,GAAvB,CAA2B,SAAAJ,CAAC,QAAK,CAAEK,EAAE,CAAEL,CAAC,CAACK,EAAR,CAAYC,KAAK,CAAEN,CAAC,CAACM,KAArB,CAAL,EAA5B,CAAZ,CACAb,QAAQ,CAAC,CACPc,IAAI,CAAE,sBADC,CAEPC,KAAK,CAAEN,SAFA,CAGPI,KAAK,CAAEH,GAHA,CAAD,CAAR,CAKAV,QAAQ,CAAC,CACPc,IAAI,CAAE,2BADC,CAEPC,KAAK,CAAEN,SAFA,CAGPI,KAAK,CAAEH,GAAG,CAACM,MAHJ,CAAD,CAAR,CAKD,CAdH,EAeD,CAlBwD,CAAlB,CAHlB,CAGfC,OAHe,WAGfA,OAHe,CAGNC,KAHM,WAGNA,KAHM,CAGCf,IAHD,WAGCA,IAHD,CAwBvB,GAAIc,OAAJ,CAAa,MAAO,qBAAC,MAAD,MAAP,CACb,GAAIC,KAAJ,CAAW,MAAO,qBAAC,YAAD,EAAc,IAAI,CAAC,OAAnB,CAA2B,OAAO,CAAEA,KAAK,CAACC,OAA1C,EAAP,CAEX,MACE,qBAAC,SAAD,MACGf,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,MAAjB,EACEA,MADF,CACS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,GAAK,YAAV,EADV,EAEEI,GAFF,CAEM,SAACF,SAAD,CAAYW,CAAZ,CAAkB,CACrB,GAAMC,CAAAA,OAAO,CAAGlB,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAhB,CACA,MACE,qBAAC,YAAD,EACE,OAAO,CAAEY,OADX,CAEE,KAAK,CAAEZ,SAFT,CAGE,GAAG,CAAEA,SAAS,CAAGW,CAHnB,CAIE,UAAU,CAAE,OAJd,EADF,CAQD,CAZF,CADH,CADF,CAiBD,CA5CD,CA8CA,cAAetB,CAAAA,UAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport DropdownMenu from './DropdownMenu'\n\n// GQL\nimport { GET_SUB_FILTERS } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  > button {\n    margin-left: 1em;\n  }\n`\nconst SubFilters = () => {\n  const globalState = useContext(store)\n  const { dispatch } = globalState\n  const { loading, error, data } = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .forEach(subFilter => {\n          const arr = data.filter[subFilter].map(v => ({ id: v.id, value: v.value }))\n          dispatch({\n            type: 'setSelectedSubFilter',\n            title: subFilter,\n            value: arr\n          })\n          dispatch({\n            type: 'setSelectedSubFilterCount',\n            title: subFilter,\n            value: arr.length\n          })\n        })\n    }\n  })\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n\n  return (\n    <Container>\n      {Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .map((subFilter, i) => {\n          const options = data.filter[subFilter]\n          return (\n            <DropdownMenu\n              options={options}\n              title={subFilter}\n              key={subFilter + i}\n              displayKey={'value'}\n            />\n          )\n        })}\n    </Container>\n  )\n}\n\nexport default SubFilters\n"]},"metadata":{},"sourceType":"module"}