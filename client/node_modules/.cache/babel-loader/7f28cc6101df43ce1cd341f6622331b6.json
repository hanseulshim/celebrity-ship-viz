{"ast":null,"code":"import _objectSpread from \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/sub-filters/DropdownMenu.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useLazyQuery } from '@apollo/client';\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries';\nimport { getFilterVariables } from 'helper';\nimport { StyledMenu, StyledCheckbox, StyledDropdown } from 'components/common/StyledComponents';\nconst Button = styled.button`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tcolor: ${props => props.theme.jungleMist};\n\tbackground-color: ${props => props.theme.biscay};\n\tpadding: 0.5em 1em;\n\tfont-weight: 500;\n\tfont-size: 1rem;\n\tborder-radius: 2px;\n\tcursor: pointer;\n\tbox-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`;\nconst ApplyButton = styled.button`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tcolor: ${props => props.theme.white};\n\tbackground-color: ${props => props.theme.biscay};\n\tpadding: 0.25em 0.25em;\n\tfont-weight: 500;\n\tfont-size: 0.75rem;\n\tborder-radius: 2px;\n\tcursor: pointer;\n\tmin-width: 50px;\n\tbox-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`;\n\nconst DropdownMenu = (_ref) => {\n  let options = _ref.options,\n      title = _ref.title,\n      displayKey = _ref.displayKey,\n      props = _objectWithoutProperties(_ref, [\"options\", \"title\", \"displayKey\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek,\n        peerGroupFilters = state.peerGroupFilters,\n        selectedPeerShip = state.selectedPeerShip,\n        selectedPeerProduct = state.selectedPeerProduct,\n        selectedPeerSailingDates = state.selectedPeerSailingDates,\n        filter = state.filter,\n        peerFilter = state.peerFilter,\n        filterCount = state.filterCount;\n\n  const _useLazyQuery = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({\n        type: 'setShipData',\n        value: data.deckVisualList\n      });\n    },\n    fetchPolicy: 'network-only'\n  }),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n        applyFilters = _useLazyQuery2[0]; // keep local state array for save button\n\n\n  const _useState3 = useState(filter[title]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        subFilter = _useState4[0],\n        setSubFilter = _useState4[1];\n\n  useEffect(() => {\n    setSubFilter(filter[title]);\n  }, [filter, title]);\n\n  const handleCheck = ({\n    id,\n    value\n  }) => {\n    const foundFilter = subFilter.find(v => v.id === id);\n\n    if (foundFilter) {\n      setSubFilter(subFilter.filter(v => v.id !== id));\n    } else {\n      setSubFilter([...subFilter, {\n        id,\n        value\n      }]);\n    }\n  };\n\n  const handleSave = e => {\n    if (e.key === 'save') {\n      dispatch({\n        type: 'setSelectedSubFilter',\n        title,\n        value: subFilter\n      });\n\n      const filterCopy = _objectSpread({}, filter);\n\n      setVisible(false);\n      filterCopy[title] = subFilter;\n      applyFilters({\n        variables: getFilterVariables(selectedShip.id, selectedSailDate.sailingDate, selectedBookingWeek, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filterCopy, peerFilter, filterCount)\n      });\n    }\n  };\n\n  const handleVisibleChange = v => {\n    setVisible(v);\n\n    if (!v) {\n      setSubFilter(filter[title]);\n    }\n  };\n\n  const formatTitle = s => {\n    const split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    return split.charAt(0).toUpperCase() + split.slice(1);\n  };\n\n  const menu = React.createElement(StyledMenu, {\n    onClick: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, options.map((option, i) => React.createElement(StyledMenu.Item, {\n    key: 'option' + i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(StyledCheckbox, {\n    onChange: () => handleCheck(option),\n    checked: !!subFilter.find(f => f.id === option.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, option[displayKey]))), React.createElement(StyledMenu.Item, {\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(ApplyButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Apply\")));\n  return React.createElement(StyledDropdown, {\n    overlay: menu,\n    onVisibleChange: handleVisibleChange,\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, formatTitle(title)));\n};\n\nexport default DropdownMenu;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/client/src/components/main/filters/sub-filters/DropdownMenu.js"],"names":["React","useState","useContext","useEffect","styled","store","useLazyQuery","GET_VISUAL_DECK_LIST","getFilterVariables","StyledMenu","StyledCheckbox","StyledDropdown","Button","button","props","theme","jungleMist","biscay","ApplyButton","white","DropdownMenu","options","title","displayKey","visible","setVisible","globalState","state","dispatch","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","onCompleted","data","type","value","deckVisualList","fetchPolicy","applyFilters","subFilter","setSubFilter","handleCheck","id","foundFilter","find","v","handleSave","e","key","filterCopy","variables","sailingDate","handleVisibleChange","formatTitle","s","split","replace","charAt","toUpperCase","slice","menu","map","option","i","f"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useLazyQuery } from '@apollo/client'\n\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\nimport {\n\tStyledMenu,\n\tStyledCheckbox,\n\tStyledDropdown\n} from 'components/common/StyledComponents'\n\nconst Button = styled.button`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tcolor: ${(props) => props.theme.jungleMist};\n\tbackground-color: ${(props) => props.theme.biscay};\n\tpadding: 0.5em 1em;\n\tfont-weight: 500;\n\tfont-size: 1rem;\n\tborder-radius: 2px;\n\tcursor: pointer;\n\tbox-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst ApplyButton = styled.button`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tcolor: ${(props) => props.theme.white};\n\tbackground-color: ${(props) => props.theme.biscay};\n\tpadding: 0.25em 0.25em;\n\tfont-weight: 500;\n\tfont-size: 0.75rem;\n\tborder-radius: 2px;\n\tcursor: pointer;\n\tmin-width: 50px;\n\tbox-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst DropdownMenu = ({ options, title, displayKey, ...props }) => {\n\tconst [visible, setVisible] = useState(false)\n\tconst globalState = useContext(store)\n\tconst { state, dispatch } = globalState\n\tconst {\n\t\tselectedShip,\n\t\tselectedProduct,\n\t\tselectedItinerary,\n\t\tselectedSailDate,\n\t\tselectedBookingWeek,\n\t\tpeerGroupFilters,\n\t\tselectedPeerShip,\n\t\tselectedPeerProduct,\n\t\tselectedPeerSailingDates,\n\t\tfilter,\n\t\tpeerFilter,\n\t\tfilterCount\n\t} = state\n\tconst [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n\t\tonCompleted: (data) => {\n\t\t\tdispatch({ type: 'setShipData', value: data.deckVisualList })\n\t\t},\n\t\tfetchPolicy: 'network-only'\n\t})\n\n\t// keep local state array for save button\n\tconst [subFilter, setSubFilter] = useState(filter[title])\n\n\tuseEffect(() => {\n\t\tsetSubFilter(filter[title])\n\t}, [filter, title])\n\n\tconst handleCheck = ({ id, value }) => {\n\t\tconst foundFilter = subFilter.find((v) => v.id === id)\n\t\tif (foundFilter) {\n\t\t\tsetSubFilter(subFilter.filter((v) => v.id !== id))\n\t\t} else {\n\t\t\tsetSubFilter([...subFilter, { id, value }])\n\t\t}\n\t}\n\n\tconst handleSave = (e) => {\n\t\tif (e.key === 'save') {\n\t\t\tdispatch({ type: 'setSelectedSubFilter', title, value: subFilter })\n\t\t\tconst filterCopy = { ...filter }\n\t\t\tsetVisible(false)\n\t\t\tfilterCopy[title] = subFilter\n\t\t\tapplyFilters({\n\t\t\t\tvariables: getFilterVariables(\n\t\t\t\t\tselectedShip.id,\n\t\t\t\t\tselectedSailDate.sailingDate,\n\t\t\t\t\tselectedBookingWeek,\n\t\t\t\t\tselectedProduct.id,\n\t\t\t\t\tselectedItinerary.id,\n\t\t\t\t\tpeerGroupFilters,\n\t\t\t\t\tselectedPeerShip,\n\t\t\t\t\tselectedPeerProduct.id,\n\t\t\t\t\tselectedPeerSailingDates[0],\n\t\t\t\t\tselectedPeerSailingDates[1],\n\t\t\t\t\tfilterCopy,\n\t\t\t\t\tpeerFilter,\n\t\t\t\t\tfilterCount\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\t}\n\n\tconst handleVisibleChange = (v) => {\n\t\tsetVisible(v)\n\t\tif (!v) {\n\t\t\tsetSubFilter(filter[title])\n\t\t}\n\t}\n\n\tconst formatTitle = (s) => {\n\t\tconst split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ')\n\t\treturn split.charAt(0).toUpperCase() + split.slice(1)\n\t}\n\n\tconst menu = (\n\t\t<StyledMenu onClick={handleSave}>\n\t\t\t{options.map((option, i) => (\n\t\t\t\t<StyledMenu.Item key={'option' + i}>\n\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\tonChange={() => handleCheck(option)}\n\t\t\t\t\t\tchecked={!!subFilter.find((f) => f.id === option.id)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option[displayKey]}\n\t\t\t\t\t</StyledCheckbox>\n\t\t\t\t</StyledMenu.Item>\n\t\t\t))}\n\t\t\t<StyledMenu.Item key=\"save\">\n\t\t\t\t<ApplyButton>Apply</ApplyButton>\n\t\t\t</StyledMenu.Item>\n\t\t</StyledMenu>\n\t)\n\n\treturn (\n\t\t<StyledDropdown\n\t\t\toverlay={menu}\n\t\t\tonVisibleChange={handleVisibleChange}\n\t\t\tvisible={visible}\n\t\t>\n\t\t\t<Button>{formatTitle(title)}</Button>\n\t\t</StyledDropdown>\n\t)\n}\n\nexport default DropdownMenu\n"]},"metadata":{},"sourceType":"module"}