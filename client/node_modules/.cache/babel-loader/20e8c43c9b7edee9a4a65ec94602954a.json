{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/CategoryClass.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client';\nimport { GET_CABIN_CATEGORY_CLASS_CHART } from 'graphql/queries';\nimport { categoryClassLayout } from './config';\nimport { createCategoryClass } from './helper';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport Plot from 'react-plotly.js';\nimport categoryClassBlurry from 'assets/categoryClassBlurry.png';\nconst Blurry = styled.img`\n  width: 400px;\n`;\n\nconst CategoryClass = () => {\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedShip = state.selectedShip,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek;\n\n  const _useQuery = useQuery(GET_CABIN_CATEGORY_CLASS_CHART, {\n    variables: {\n      shipId: selectedShip.id,\n      sailingDateId: selectedSailDate.id,\n      interval: selectedBookingWeek\n    },\n    skip: !selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null,\n    fetchPolicy: 'network-only'\n  }),\n        networkStatus = _useQuery.networkStatus,\n        error = _useQuery.error,\n        data = _useQuery.data; // local state for plot data\n\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        plotData = _useState2[0],\n        setPlotdata = _useState2[1];\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.cabinCategoryClassChart);\n      const barData = bars.filter(v => v !== '__typename' && v !== 'y').map(bar => createCategoryClass(data.cabinCategoryClassChart[bar], bar, data.cabinCategoryClassChart.y));\n      setPlotdata(barData);\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data]);\n\n  if (!selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null) {\n    return React.createElement(Blurry, {\n      src: categoryClassBlurry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  if (networkStatus !== 2 && networkStatus !== 7) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Plot, {\n    data: plotData,\n    layout: categoryClassLayout,\n    config: {\n      displayModeBar: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default CategoryClass;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/CategoryClass.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_CABIN_CATEGORY_CLASS_CHART","categoryClassLayout","createCategoryClass","Loader","Notification","Plot","categoryClassBlurry","Blurry","img","CategoryClass","globalState","state","selectedShip","selectedSailDate","selectedBookingWeek","variables","shipId","id","sailingDateId","interval","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","bars","Object","keys","cabinCategoryClassChart","barData","filter","v","map","bar","y","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_CABIN_CATEGORY_CLASS_CHART } from 'graphql/queries'\nimport { categoryClassLayout } from './config'\nimport { createCategoryClass } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport categoryClassBlurry from 'assets/categoryClassBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst CategoryClass = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedShip, selectedSailDate, selectedBookingWeek } = state\n\n  const { networkStatus, error, data } = useQuery(\n    GET_CABIN_CATEGORY_CLASS_CHART,\n    {\n      variables: {\n        shipId: selectedShip.id,\n        sailingDateId: selectedSailDate.id,\n        interval: selectedBookingWeek\n      },\n      skip:\n        !selectedShip.id ||\n        !selectedSailDate.id ||\n        selectedBookingWeek === null,\n      fetchPolicy: 'network-only'\n    }\n  )\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.cabinCategoryClassChart)\n      const barData = bars\n        .filter(v => v !== '__typename' && v !== 'y')\n        .map(bar =>\n          createCategoryClass(\n            data.cabinCategoryClassChart[bar],\n            bar,\n            data.cabinCategoryClassChart.y\n          )\n        )\n      setPlotdata(barData)\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data])\n\n  if (\n    !selectedShip.id ||\n    !selectedSailDate.id ||\n    selectedBookingWeek === null\n  ) {\n    return <Blurry src={categoryClassBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={categoryClassLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default CategoryClass\n"]},"metadata":{},"sourceType":"module"}