{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/legend/SelectDeck.js\";\nimport React, { useContext, useState } from 'react';\nimport { store } from 'context/store';\nimport styled from 'styled-components';\nimport { DECK_SLICE_SVG_URL } from './config';\nimport { GET_DECK_LIST } from 'graphql/queries';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport { useQuery } from '@apollo/client';\nimport numeral from 'numeral';\nconst Container = styled.div`\n  display: flex;\n  min-height: 500px;\n  flex-direction: column;\n  flex-flow: column-reverse;\n  padding: 1em 1em;\n  border: 2px solid ${props => props.theme.biscay};\n`;\nconst Deck = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${props => props.theme.jungleMist};\n  margin: 1em 0em;\n  cursor: pointer;\n\n  span {\n    border-bottom: ${props => props.selected ? `1px solid ${props.theme.jungleMist}` : ''};\n  }\n\n  img {\n    width: 200px;\n  }\n`;\n\nconst DeckSvg = ({\n  deck\n}) => {\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedDeck = state.selectedDeck,\n        selectedShip = state.selectedShip;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hover = _useState2[0],\n        setHover = _useState2[1];\n\n  const getSrc = () => hover || selectedDeck === deck ? DECK_SLICE_SVG_URL.replace('{SHIP_CLASS}', selectedShip.classId).replace('{DECK}', `${deck}_ro`) : DECK_SLICE_SVG_URL.replace('{SHIP_CLASS}', selectedShip.classId).replace('{DECK}', deck);\n\n  return React.createElement(\"img\", {\n    src: getSrc(),\n    onMouseOver: () => setHover(true),\n    onMouseOut: () => setHover(false),\n    alt: \"deck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};\n\nconst SelectDeck = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedDeck = state.selectedDeck,\n        selectedShip = state.selectedShip;\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        deckList = _useState4[0],\n        setDeckList = _useState4[1];\n\n  const _useQuery = useQuery(GET_DECK_LIST, {\n    variables: {\n      shipId: selectedShip.id\n    },\n\n    onCompleted({\n      deckList\n    }) {\n      dispatch({\n        type: 'setSelectedDeck',\n        value: Math.min(...deckList)\n      });\n      setDeckList(deckList);\n    }\n\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error;\n\n  const handleSelect = value => {\n    dispatch({\n      type: 'setSelectedDeck',\n      value\n    });\n  };\n\n  if (loading) {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Notification, {\n      type: \"error\",\n      message: error.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, deckList.map((deck, i) => {\n    return React.createElement(Deck, {\n      key: 'deck' + i,\n      onClick: () => handleSelect(deck),\n      selected: selectedDeck === deck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"D\", numeral(deck).format('00')), React.createElement(DeckSvg, {\n      deck: deck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default SelectDeck;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/legend/SelectDeck.js"],"names":["React","useContext","useState","store","styled","DECK_SLICE_SVG_URL","GET_DECK_LIST","Loader","Notification","useQuery","numeral","Container","div","props","theme","biscay","Deck","jungleMist","selected","DeckSvg","deck","globalState","state","selectedDeck","selectedShip","hover","setHover","getSrc","replace","classId","SelectDeck","dispatch","deckList","setDeckList","variables","shipId","id","onCompleted","type","value","Math","min","loading","error","handleSelect","message","map","i","format"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { DECK_SLICE_SVG_URL } from './config'\nimport { GET_DECK_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport { useQuery } from '@apollo/client'\nimport numeral from 'numeral'\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 500px;\n  flex-direction: column;\n  flex-flow: column-reverse;\n  padding: 1em 1em;\n  border: 2px solid ${props => props.theme.biscay};\n`\nconst Deck = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${props => props.theme.jungleMist};\n  margin: 1em 0em;\n  cursor: pointer;\n\n  span {\n    border-bottom: ${props =>\n      props.selected ? `1px solid ${props.theme.jungleMist}` : ''};\n  }\n\n  img {\n    width: 200px;\n  }\n`\n\nconst DeckSvg = ({ deck }) => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedDeck, selectedShip } = state\n  const [hover, setHover] = useState(false)\n  const getSrc = () =>\n    hover || selectedDeck === deck\n      ? DECK_SLICE_SVG_URL.replace(\n          '{SHIP_CLASS}',\n          selectedShip.classId\n        ).replace('{DECK}', `${deck}_ro`)\n      : DECK_SLICE_SVG_URL.replace(\n          '{SHIP_CLASS}',\n          selectedShip.classId\n        ).replace('{DECK}', deck)\n  return (\n    <img\n      src={getSrc()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      alt=\"deck\"\n    />\n  )\n}\n\nconst SelectDeck = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedDeck, selectedShip } = state\n  const [deckList, setDeckList] = useState([])\n  const { loading, error } = useQuery(GET_DECK_LIST, {\n    variables: { shipId: selectedShip.id },\n    onCompleted({ deckList }) {\n      dispatch({ type: 'setSelectedDeck', value: Math.min(...deckList) })\n      setDeckList(deckList)\n    }\n  })\n\n  const handleSelect = value => {\n    dispatch({ type: 'setSelectedDeck', value })\n  }\n\n  if (loading) {\n    return (\n      <Container>\n        <Loader />\n      </Container>\n    )\n  }\n  if (error) {\n    return (\n      <Container>\n        <Notification type=\"error\" message={error.message} />\n      </Container>\n    )\n  }\n\n  return (\n    <Container>\n      {deckList.map((deck, i) => {\n        return (\n          <Deck\n            key={'deck' + i}\n            onClick={() => handleSelect(deck)}\n            selected={selectedDeck === deck}\n          >\n            <span>D{numeral(deck).format('00')}</span>\n            <DeckSvg deck={deck} />\n          </Deck>\n        )\n      })}\n    </Container>\n  )\n}\n\nexport default SelectDeck\n"]},"metadata":{},"sourceType":"module"}