{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/main-filters/SelectShip.js\";\nimport React, { useContext } from 'react';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client'; // Project Components\n\nimport FilterSelectGroup from 'components/common/FilterSelectGroup';\nimport Notification from 'components/common/Notification';\nimport Loader from 'components/common/Loader'; // GQL\n\nimport { GET_SHIP_LIST } from 'graphql/queries';\n\nconst SelectShip = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip;\n\n  const _useQuery = useQuery(GET_SHIP_LIST),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const onChange = id => {\n    const ship = data.shipList.find(ship => ship.id === id);\n    dispatch({\n      type: 'setSelectedShip',\n      value: ship\n    });\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n  return React.createElement(FilterSelectGroup, {\n    label: \"Ship\",\n    displayKey: \"shipName\",\n    grouping: \"className\",\n    options: data.shipList,\n    value: selectedShip.id,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n};\n\nexport default SelectShip;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/main-filters/SelectShip.js"],"names":["React","useContext","store","useQuery","FilterSelectGroup","Notification","Loader","GET_SHIP_LIST","SelectShip","globalState","state","dispatch","selectedShip","loading","error","data","onChange","id","ship","shipList","find","type","value","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,WAAW,GAAGR,UAAU,CAACC,KAAD,CAA9B;AADuB,QAEfQ,KAFe,GAEKD,WAFL,CAEfC,KAFe;AAAA,QAERC,QAFQ,GAEKF,WAFL,CAERE,QAFQ;AAAA,QAGfC,YAHe,GAGEF,KAHF,CAGfE,YAHe;;AAAA,oBAKUT,QAAQ,CAACI,aAAD,CALlB;AAAA,QAKfM,OALe,aAKfA,OALe;AAAA,QAKNC,KALM,aAKNA,KALM;AAAA,QAKCC,IALD,aAKCA,IALD;;AAOvB,QAAMC,QAAQ,GAAGC,EAAE,IAAI;AACrB,UAAMC,IAAI,GAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBF,IAAI,IAAIA,IAAI,CAACD,EAAL,KAAYA,EAAvC,CAAb;AACAN,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,KAAK,EAAEJ;AAAlC,KAAD,CAAR;AACD,GAHD;;AAKA,MAAIL,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACS,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,SACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,QAAQ,EAAC,WAHX;AAIE,IAAA,OAAO,EAAER,IAAI,CAACI,QAJhB;AAKE,IAAA,KAAK,EAAEP,YAAY,CAACK,EALtB;AAME,IAAA,QAAQ,EAAED,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAxBD;;AA0BA,eAAeR,UAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelectGroup from 'components/common/FilterSelectGroup'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SHIP_LIST } from 'graphql/queries'\n\nconst SelectShip = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip } = state\n\n  const { loading, error, data } = useQuery(GET_SHIP_LIST)\n\n  const onChange = id => {\n    const ship = data.shipList.find(ship => ship.id === id)\n    dispatch({ type: 'setSelectedShip', value: ship })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelectGroup\n      label=\"Ship\"\n      displayKey=\"shipName\"\n      grouping=\"className\"\n      options={data.shipList}\n      value={selectedShip.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectShip\n"]},"metadata":{},"sourceType":"module"}