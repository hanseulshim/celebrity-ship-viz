{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/SupplyBurndown.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client';\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries';\nimport { supplyBurndownLayout } from './config';\nimport { createSupplyBurndown } from './helper';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\nimport Plot from 'react-plotly.js';\nimport { getFilterVariables } from 'helper';\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png';\nconst Blurry = styled.img`\n  width: 400px;\n`;\n\nconst SupplyBurndown = () => {\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct,\n        selectedItinerary = state.selectedItinerary,\n        selectedSailDate = state.selectedSailDate,\n        selectedBookingWeek = state.selectedBookingWeek,\n        peerGroupFilters = state.peerGroupFilters,\n        selectedPeerShip = state.selectedPeerShip,\n        selectedPeerProduct = state.selectedPeerProduct,\n        selectedPeerSailingDates = state.selectedPeerSailingDates,\n        filter = state.filter,\n        peerFilter = state.peerFilter,\n        filterCount = state.filterCount;\n\n  const _useQuery = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n    variables: getFilterVariables(selectedShip.id, selectedSailDate.id, selectedBookingWeek, selectedProduct.id, selectedItinerary.id, peerGroupFilters, selectedPeerShip, selectedPeerProduct.id, selectedPeerSailingDates[0], selectedPeerSailingDates[1], filter, peerFilter, filterCount),\n    skip: !selectedShip.id || !selectedSailDate.id,\n    fetchPolicy: 'network-only'\n  }),\n        networkStatus = _useQuery.networkStatus,\n        error = _useQuery.error,\n        data = _useQuery.data; // local state for plot data\n\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        plotData = _useState2[0],\n        setPlotdata = _useState2[1];\n\n  useEffect(() => {\n    if (data) {\n      const lines = Object.keys(data.supplyBurndownChart);\n      const lineData = lines.filter(v => v !== '__typename').map(line => createSupplyBurndown(data.supplyBurndownChart[line], line, selectedShip.shipName));\n      setPlotdata(lineData);\n    }\n  }, [selectedShip, selectedSailDate, data]);\n\n  if (!selectedShip.id || !selectedSailDate.id) {\n    return React.createElement(Blurry, {\n      src: supplyBurndownBlurry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n  if (networkStatus !== 2 && networkStatus !== 7) {\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  }\n\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Plot, {\n    data: plotData,\n    layout: supplyBurndownLayout,\n    config: {\n      displayModeBar: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default SupplyBurndown;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/charts/SupplyBurndown.js"],"names":["React","useState","useContext","useEffect","styled","store","useQuery","GET_SUPPLY_BURNDOWN_CHART","supplyBurndownLayout","createSupplyBurndown","Loader","Notification","Plot","getFilterVariables","supplyBurndownBlurry","Blurry","img","SupplyBurndown","globalState","state","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedBookingWeek","peerGroupFilters","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","peerFilter","filterCount","variables","id","skip","fetchPolicy","networkStatus","error","data","plotData","setPlotdata","lines","Object","keys","supplyBurndownChart","lineData","v","map","line","shipName","message","displayModeBar"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries'\nimport { supplyBurndownLayout } from './config'\nimport { createSupplyBurndown } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport { getFilterVariables } from 'helper'\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst SupplyBurndown = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n\n  const { networkStatus, error, data } = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n    variables: getFilterVariables(\n      selectedShip.id,\n      selectedSailDate.id,\n      selectedBookingWeek,\n      selectedProduct.id,\n      selectedItinerary.id,\n      peerGroupFilters,\n      selectedPeerShip,\n      selectedPeerProduct.id,\n      selectedPeerSailingDates[0],\n      selectedPeerSailingDates[1],\n      filter,\n      peerFilter,\n      filterCount\n    ),\n    skip: !selectedShip.id || !selectedSailDate.id,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const lines = Object.keys(data.supplyBurndownChart)\n      const lineData = lines\n        .filter(v => v !== '__typename')\n        .map(line =>\n          createSupplyBurndown(\n            data.supplyBurndownChart[line],\n            line,\n            selectedShip.shipName\n          )\n        )\n      setPlotdata(lineData)\n    }\n  }, [selectedShip, selectedSailDate, data])\n\n  if (!selectedShip.id || !selectedSailDate.id) {\n    return <Blurry src={supplyBurndownBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) {\n    return <Loader />\n  }\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={supplyBurndownLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default SupplyBurndown\n"]},"metadata":{},"sourceType":"module"}