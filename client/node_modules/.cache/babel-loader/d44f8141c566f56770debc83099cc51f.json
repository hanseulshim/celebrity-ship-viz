{"ast":null,"code":"var _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/main-filters/SelectProduct.js\";\nimport React, { useContext } from 'react';\nimport { store } from 'context/store';\nimport { useQuery } from '@apollo/client'; // Project Components\n\nimport FilterSelect from 'components/common/FilterSelect'; // GQL\n\nimport { GET_PRODUCT_LIST } from 'graphql/queries';\nimport Loader from 'components/common/Loader';\nimport Notification from 'components/common/Notification';\n\nconst SelectProduct = () => {\n  const globalState = useContext(store);\n  const state = globalState.state,\n        dispatch = globalState.dispatch;\n  const selectedShip = state.selectedShip,\n        selectedProduct = state.selectedProduct;\n\n  const _useQuery = useQuery(GET_PRODUCT_LIST, {\n    variables: {\n      shipId: selectedShip.id\n    },\n    fetchPolicy: 'network-only'\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const onChange = id => {\n    const product = data.productList.find(product => product.id === id);\n    dispatch({\n      type: 'setSelectedProduct',\n      value: product\n    });\n  };\n\n  if (loading) return React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n  if (error) return React.createElement(Notification, {\n    type: \"error\",\n    message: error.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n  return React.createElement(FilterSelect, {\n    label: \"Product\",\n    displayKey: \"rdssProductCode\",\n    options: data.productList,\n    value: selectedProduct.id,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n};\n\nexport default SelectProduct;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/main-filters/SelectProduct.js"],"names":["React","useContext","store","useQuery","FilterSelect","GET_PRODUCT_LIST","Loader","Notification","SelectProduct","globalState","state","dispatch","selectedShip","selectedProduct","variables","shipId","id","fetchPolicy","loading","error","data","onChange","product","productList","find","type","value","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,gCAAzB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGR,UAAU,CAACC,KAAD,CAA9B;AAD0B,QAElBQ,KAFkB,GAEED,WAFF,CAElBC,KAFkB;AAAA,QAEXC,QAFW,GAEEF,WAFF,CAEXE,QAFW;AAAA,QAGlBC,YAHkB,GAGgBF,KAHhB,CAGlBE,YAHkB;AAAA,QAGJC,eAHI,GAGgBH,KAHhB,CAGJG,eAHI;;AAAA,oBAIOV,QAAQ,CAACE,gBAAD,EAAmB;AAC1DS,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAEH,YAAY,CAACI;AADZ,KAD+C;AAI1DC,IAAAA,WAAW,EAAE;AAJ6C,GAAnB,CAJf;AAAA,QAIlBC,OAJkB,aAIlBA,OAJkB;AAAA,QAITC,KAJS,aAITA,KAJS;AAAA,QAIFC,IAJE,aAIFA,IAJE;;AAW1B,QAAMC,QAAQ,GAAGL,EAAE,IAAI;AACrB,UAAMM,OAAO,GAAGF,IAAI,CAACG,WAAL,CAAiBC,IAAjB,CAAsBF,OAAO,IAAIA,OAAO,CAACN,EAAR,KAAeA,EAAhD,CAAhB;AACAL,IAAAA,QAAQ,CAAC;AAAEc,MAAAA,IAAI,EAAE,oBAAR;AAA8BC,MAAAA,KAAK,EAAEJ;AAArC,KAAD,CAAR;AACD,GAHD;;AAKA,MAAIJ,OAAJ,EAAa,OAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACQ,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,UAAU,EAAC,iBAFb;AAGE,IAAA,OAAO,EAAEP,IAAI,CAACG,WAHhB;AAIE,IAAA,KAAK,EAAEV,eAAe,CAACG,EAJzB;AAKE,IAAA,QAAQ,EAAEK,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA3BD;;AA6BA,eAAeb,aAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_PRODUCT_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectProduct = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip, selectedProduct } = state\n  const { loading, error, data } = useQuery(GET_PRODUCT_LIST, {\n    variables: {\n      shipId: selectedShip.id\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const product = data.productList.find(product => product.id === id)\n    dispatch({ type: 'setSelectedProduct', value: product })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Product\"\n      displayKey=\"rdssProductCode\"\n      options={data.productList}\n      value={selectedProduct.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectProduct\n"]},"metadata":{},"sourceType":"module"}