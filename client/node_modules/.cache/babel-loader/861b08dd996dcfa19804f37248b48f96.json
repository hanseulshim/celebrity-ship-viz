{"ast":null,"code":"import React,{useContext}from'react';import{store}from'context/store';import{useQuery}from'@apollo/client';// Project Components\nimport FilterSelect from'components/common/FilterSelect';// GQL\nimport{GET_PEER_GROUP_PRODUCT_LIST}from'graphql/queries';import Loader from'components/common/Loader';import Notification from'components/common/Notification';var SelectPeerProduct=function SelectPeerProduct(){var globalState=useContext(store);var state=globalState.state,dispatch=globalState.dispatch;var selectedPeerShip=state.selectedPeerShip,selectedPeerProduct=state.selectedPeerProduct;var _useQuery=useQuery(GET_PEER_GROUP_PRODUCT_LIST,{variables:{shipIdList:selectedPeerShip},fetchPolicy:'network-only'}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;var onChange=function onChange(id){var product=data.peerGroupProductList.find(function(product){return product.id===id;});dispatch({type:'setSelectedPeerProduct',value:product});};if(loading)return React.createElement(Loader,null);if(error)return React.createElement(Notification,{type:\"error\",message:error.message});return React.createElement(FilterSelect,{label:\"Product(s)\",displayKey:\"rdssProductCode\",options:data.peerGroupProductList,value:selectedPeerProduct.id,onChange:onChange});};export default SelectPeerProduct;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/filters/peer-group-filters/SelectPeerProduct.js"],"names":["React","useContext","store","useQuery","FilterSelect","GET_PEER_GROUP_PRODUCT_LIST","Loader","Notification","SelectPeerProduct","globalState","state","dispatch","selectedPeerShip","selectedPeerProduct","variables","shipIdList","fetchPolicy","loading","error","data","onChange","id","product","peerGroupProductList","find","type","value","message"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,OAASC,QAAT,KAAyB,gBAAzB,CAEA;AACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA;AACA,OAASC,2BAAT,KAA4C,iBAA5C,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,GAAMC,CAAAA,WAAW,CAAGR,UAAU,CAACC,KAAD,CAA9B,CAD8B,GAEtBQ,CAAAA,KAFsB,CAEFD,WAFE,CAEtBC,KAFsB,CAEfC,QAFe,CAEFF,WAFE,CAEfE,QAFe,IAGtBC,CAAAA,gBAHsB,CAGoBF,KAHpB,CAGtBE,gBAHsB,CAGJC,mBAHI,CAGoBH,KAHpB,CAGJG,mBAHI,eAIGV,QAAQ,CAACE,2BAAD,CAA8B,CACrES,SAAS,CAAE,CACTC,UAAU,CAAEH,gBADH,CAD0D,CAIrEI,WAAW,CAAE,cAJwD,CAA9B,CAJX,CAItBC,OAJsB,WAItBA,OAJsB,CAIbC,KAJa,WAIbA,KAJa,CAINC,IAJM,WAINA,IAJM,CAW9B,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,EAAE,CAAI,CACrB,GAAMC,CAAAA,OAAO,CAAGH,IAAI,CAACI,oBAAL,CAA0BC,IAA1B,CAA+B,SAAAF,OAAO,QAAIA,CAAAA,OAAO,CAACD,EAAR,GAAeA,EAAnB,EAAtC,CAAhB,CACAV,QAAQ,CAAC,CAAEc,IAAI,CAAE,wBAAR,CAAkCC,KAAK,CAAEJ,OAAzC,CAAD,CAAR,CACD,CAHD,CAKA,GAAIL,OAAJ,CAAa,MAAO,qBAAC,MAAD,MAAP,CACb,GAAIC,KAAJ,CAAW,MAAO,qBAAC,YAAD,EAAc,IAAI,CAAC,OAAnB,CAA2B,OAAO,CAAEA,KAAK,CAACS,OAA1C,EAAP,CACX,MACE,qBAAC,YAAD,EACE,KAAK,CAAC,YADR,CAEE,UAAU,CAAC,iBAFb,CAGE,OAAO,CAAER,IAAI,CAACI,oBAHhB,CAIE,KAAK,CAAEV,mBAAmB,CAACQ,EAJ7B,CAKE,QAAQ,CAAED,QALZ,EADF,CASD,CA3BD,CA6BA,cAAeZ,CAAAA,iBAAf","sourcesContent":["import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_PEER_GROUP_PRODUCT_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectPeerProduct = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedPeerShip, selectedPeerProduct } = state\n  const { loading, error, data } = useQuery(GET_PEER_GROUP_PRODUCT_LIST, {\n    variables: {\n      shipIdList: selectedPeerShip\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const product = data.peerGroupProductList.find(product => product.id === id)\n    dispatch({ type: 'setSelectedPeerProduct', value: product })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Product(s)\"\n      displayKey=\"rdssProductCode\"\n      options={data.peerGroupProductList}\n      value={selectedPeerProduct.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectPeerProduct\n"]},"metadata":{},"sourceType":"module"}