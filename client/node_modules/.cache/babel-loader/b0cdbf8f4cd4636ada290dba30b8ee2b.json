{"ast":null,"code":"import _slicedToArray from \"/Users/hanseulshim/Projects/celebrity-ship-viz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/ship-viz/index.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { store } from 'context/store';\nimport Plot from 'react-plotly.js';\nimport { layout } from './config';\nimport { createDeck } from './helper';\nconst Container = styled.div`\n  width: 100%;\n  height: 700px;\n`;\n\nconst ShipViz = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        plotData = _useState2[0],\n        setPlotdata = _useState2[1];\n\n  const globalState = useContext(store);\n  const state = globalState.state;\n  const selectedDeck = state.selectedDeck,\n        shipData = state.shipData,\n        peerGroupFilters = state.peerGroupFilters;\n  useEffect(() => {\n    const decks = Object.keys(shipData);\n    const coords = decks.map(deck => createDeck(shipData[deck], parseInt(deck), selectedDeck, peerGroupFilters));\n    setPlotdata(coords);\n  }, [selectedDeck, peerGroupFilters, shipData]);\n  return !plotData.length ? React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }) : React.createElement(Plot, {\n    data: plotData,\n    layout: layout,\n    revision: Math.random(),\n    useResizeHandler: true,\n    style: {\n      width: '100%',\n      height: '700px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n};\n\nexport default ShipViz;","map":{"version":3,"sources":["/Users/hanseulshim/Projects/celebrity-ship-viz/src/components/main/ship-viz/index.js"],"names":["React","useState","useEffect","useContext","styled","store","Plot","layout","createDeck","Container","div","ShipViz","plotData","setPlotdata","globalState","state","selectedDeck","shipData","peerGroupFilters","decks","Object","keys","coords","map","deck","parseInt","length","Math","random","width","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,UAA3B;AAEA,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;;;CAA7B;;AAKA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACYV,QAAQ,CAAC,EAAD,CADpB;AAAA;AAAA,QACbW,QADa;AAAA,QACHC,WADG;;AAEpB,QAAMC,WAAW,GAAGX,UAAU,CAACE,KAAD,CAA9B;AAFoB,QAGZU,KAHY,GAGFD,WAHE,CAGZC,KAHY;AAAA,QAIZC,YAJY,GAIiCD,KAJjC,CAIZC,YAJY;AAAA,QAIEC,QAJF,GAIiCF,KAJjC,CAIEE,QAJF;AAAA,QAIYC,gBAJZ,GAIiCH,KAJjC,CAIYG,gBAJZ;AAKpBhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAd;AACA,UAAMK,MAAM,GAAGH,KAAK,CAACI,GAAN,CAAUC,IAAI,IAC3BhB,UAAU,CAACS,QAAQ,CAACO,IAAD,CAAT,EAAiBC,QAAQ,CAACD,IAAD,CAAzB,EAAiCR,YAAjC,EAA+CE,gBAA/C,CADG,CAAf;AAGAL,IAAAA,WAAW,CAACS,MAAD,CAAX;AACD,GANQ,EAMN,CAACN,YAAD,EAAeE,gBAAf,EAAiCD,QAAjC,CANM,CAAT;AAOA,SAAO,CAACL,QAAQ,CAACc,MAAV,GACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAGL,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEd,QADR;AAEE,IAAA,MAAM,EAAEL,MAFV;AAGE,IAAA,QAAQ,EAAEoB,IAAI,CAACC,MAAL,EAHZ;AAIE,IAAA,gBAAgB,EAAE,IAJpB;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAWD,CAvBD;;AAyBA,eAAenB,OAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport Plot from 'react-plotly.js'\nimport { layout } from './config'\nimport { createDeck } from './helper'\n\nconst Container = styled.div`\n  width: 100%;\n  height: 700px;\n`\n\nconst ShipViz = () => {\n  const [plotData, setPlotdata] = useState([])\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedDeck, shipData, peerGroupFilters } = state\n  useEffect(() => {\n    const decks = Object.keys(shipData)\n    const coords = decks.map(deck =>\n      createDeck(shipData[deck], parseInt(deck), selectedDeck, peerGroupFilters)\n    )\n    setPlotdata(coords)\n  }, [selectedDeck, peerGroupFilters, shipData])\n  return !plotData.length ? (\n    <Container />\n  ) : (\n    <Plot\n      data={plotData}\n      layout={layout}\n      revision={Math.random()}\n      useResizeHandler={true}\n      style={{ width: '100%', height: '700px' }}\n    />\n  )\n}\n\nexport default ShipViz\n"]},"metadata":{},"sourceType":"module"}