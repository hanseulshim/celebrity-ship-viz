{"version":3,"sources":["assets/starry_night_sky.png","assets/logo.png","assets/peer-legend.png","assets/supplyBurndownBlurry.png","assets/categoryClassBlurry.png","assets/decksBlurry.png","styles/colors.js","styles/GlobalStyle.js","context/initialState.js","context/store.js","graphql/queries/filters.js","graphql/queries/ship.js","graphql/queries/cabin.js","graphql/queries/chart.js","components/main/Header.js","components/common/StyledComponents.js","components/common/FilterSelect.js","components/common/Loader.js","components/common/Notification.js","components/main/filters/main-filters/SelectProduct.js","components/main/filters/main-filters/SelectItinerary.js","components/common/FilterSelectGroup.js","components/main/filters/main-filters/SelectShip.js","components/main/filters/main-filters/PeerGroupToggle.js","components/main/filters/main-filters/SelectSailDate.js","components/common/Button.js","components/common/Icon.js","components/main/filters/main-filters/CsvDownload.js","helper.js","components/main/filters/main-filters/index.js","components/main/filters/peer-group-filters/SelectPeerShip.js","components/main/filters/peer-group-filters/SelectPeerProduct.js","components/main/filters/peer-group-filters/SelectPeerSailingDates.js","components/main/filters/peer-group-filters/PeerDropdownMenu.js","components/main/filters/peer-group-filters/PeerSubFilters.js","components/main/filters/peer-group-filters/index.js","components/main/filters/index.js","components/main/filters/sub-filters/DropdownMenu.js","components/main/filters/sub-filters/index.js","components/main/ship-viz/config.js","components/main/ship-viz/helper.js","components/main/ship-viz/index.js","components/main/filters/timeline/index.js","components/main/legend/config.js","components/main/legend/SelectDeck.js","components/main/legend/LegendColors.js","components/main/legend/index.js","components/main/legend/DeckView.js","components/main/charts/config.js","components/main/charts/SupplyBurndown.js","components/main/charts/helper.js","components/main/charts/CategoryClass.js","components/main/charts/Decks.js","components/main/charts/index.js","components/main/index.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","white","black","black50","black0","biscay","lochmara","jungleMist","silverTree","aquaForest","keyLimePie","hokeyPokey","cabaret","mandy","dusk","babyBlue","shuttleGray","fiord","cornflowerBlue","createGlobalStyle","bg","colors","peerGroupFilters","selectedShip","selectedProduct","selectedItinerary","selectedSailDate","selectedPeerShip","selectedPeerProduct","selectedPeerSailingDates","filter","channel","bookingType","pointOfSaleMarket","cabinCategoryClass","cabinCategory","cabinClassRate","rateCategory","bookedOccupancy","peerFilter","filterCount","selectedBookingWeek","selectedDeck","shipData","store","createContext","initialState","Provider","StateProvider","children","useReducer","state","action","type","value","title","Error","dispatch","GET_SHIP_LIST","gql","GET_PRODUCT_LIST","GET_PEER_GROUP_PRODUCT_LIST","GET_ITINERARY_LIST","GET_SAILING_DATE_LIST","GET_SUB_FILTERS","GET_SNAPSHOT_INTERVAL_LIST","GET_VISUAL_DECK_LIST","GET_FIRST_SAIL_DATE","GET_DECK_LIST","GET_SUPPLY_BURNDOWN_CHART","GET_CABIN_CATEGORY_CLASS_CHART","GET_DECK_CHART","Container","styled","div","props","theme","Logo","img","Header","src","logo","StyledSelect","Select","timeline","StyledDropdown","Dropdown","StyledMenu","Menu","StyledCheckbox","Checkbox","StyledModal","Modal","Option","Label","span","FilterSelect","label","options","onChange","displayKey","width","style","showSearch","filterOption","input","option","toLowerCase","indexOf","mode","disabled","map","i","id","key","moment","utc","format","Loader","Notification","message","SelectProduct","globalState","useContext","useQuery","variables","shipId","fetchPolicy","loading","error","data","productList","product","find","SelectItinerary","productId","itineraryList","itinerary","OptGroup","FilterSelectGroup","grouping","groups","Set","item","group","SelectShip","shipList","ship","StyledSwitch","Switch","PeerGroupToggle","checked","SelectSailDate","itineraryId","sailingDateList","sailDate","date","StyledButton","button","Button","StyledIcon","FontAwesomeIcon","Icon","icon","Download","CsvDownload","useState","setData","useEffect","flatData","Object","keys","deck","flat","peerGroupData","length","prototype","hasOwnProperty","call","row","obj","cabinNumber","bookingStatus","cabinCapacity","category","selectedPercent","peerGroupPercent","difference","onClick","csvRows","headers","push","header","replace","join","csvData","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","generateCsv","getFilterVariables","sailingDateId","interval","peerGroupShipIds","peerGroupProductId","peerGroupStartDate","peerGroupEndDate","forEach","filterKey","arr","v","Apply","MainFilters","useLazyQuery","onCompleted","deckVisualList","applyFilters","primary","SelectPeerShip","SelectPeerProduct","shipIdList","peerGroupProductList","RangePicker","DatePicker","StyledRangePicker","SelectPeerSailingDates","dateString","ApplyButton","PeerDropdownMenu","visible","setVisible","subFilter","setSubFilter","menu","e","peerFilterCopy","Item","foundFilter","handleCheck","f","overlay","onVisibleChange","s","split","charAt","toUpperCase","slice","formatTitle","OpenModal","PeerSubFilters","onOk","onCancel","okText","footer","Title","PeerGroupFilters","Filters","DropdownMenu","filterCopy","SubFilters","layout","margin","l","r","t","b","pad","scene","xaxis","showgrid","zeroline","showticklabels","showspikes","yaxis","zaxis","showline","aspectmode","aspectratio","x","y","z","camera","center","eye","paper_bgcolor","plot_bgcolor","getPolygonCoordinates","point","customdata","colorCount","statusObj","even","colorArray","reverse","parseInt","tick","offset","num","Math","round","index","color","isNaN","status","lastInvalidEven","lastInvalidOdd","lastUnbookedEven","lastUnbookedOdd","lastPartEven","lastPartOdd","lastFullEven","lastFullOdd","getStatus","h0","plotY0","h1","plotY1","v0","plotX0","v1","plotX1","v2","v3","j","k","facecolor","createDeck","y0","x0","coords","hover","hoverlabel","bgcolor","bordercolor","font","size","hovertemplate","hoverInfo","hoverinfo","opacity","flatshading","ShipViz","plotData","setPlotdata","revision","random","useResizeHandler","height","ChangeInterval","IntervalMeter","IntervalPosition","Timeline","snapshotIntervalList","onError","handleStep","dir","findIndex","snapshot","entries","intervalLabel","total","getWidth","DECK_SLICE_SVG_URL","Deck","selected","DeckSvg","setHover","classId","onMouseOver","onMouseOut","alt","SelectDeck","deckList","setDeckList","min","numeral","ColorRow","ColorItem","Color","fill","legendItems","LegendColors","LegendContainer","PeerGroupLegend","Legend","peerGroupLegend","DeckView","Number","isInteger","supplyBurndownLayout","hovermode","text","showlegend","legend","xanchor","orientation","autorange","gridcolor","ticks","tickfont","categoryClassLayout","barmode","traceorder","deckLayout","Blurry","SupplyBurndown","skip","networkStatus","lineData","supplyBurndownChart","line","selectedShipName","lineColor","name","marker","createSupplyBurndown","shipName","config","displayModeBar","supplyBurndownBlurry","CategoryClass","barData","cabinCategoryClassChart","bar","categoryClasses","barColor","createCategoryClass","categoryClassBlurry","Decks","deckChart","createDecks","decksBlurry","Charts","Row","VizContainer","Main","firstSailDate","sailingDate","padding","WrappedHorizontalLoginForm","Form","create","fieldsError","form","setPassword","getFieldDecorator","getFieldsError","getFieldError","passwordError","isFieldTouched","onSubmit","preventDefault","validateFields","err","values","password","handleSubmit","validateStatus","help","rules","required","prefix","placeholder","htmlType","some","field","library","add","faDownload","faFilter","faEdit","App","validated","process","GlobalStyle","Login","Boolean","location","hostname","match","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","sessiontoken","client","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","render","ApolloProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61dab7da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starry_night_sky.8628dd39.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ed0a4ba7.png\";","module.exports = __webpack_public_path__ + \"static/media/peer-legend.6136f156.png\";","module.exports = __webpack_public_path__ + \"static/media/supplyBurndownBlurry.69a0529a.png\";","module.exports = __webpack_public_path__ + \"static/media/categoryClassBlurry.35906fa7.png\";","module.exports = __webpack_public_path__ + \"static/media/decksBlurry.43cb86a2.png\";","export default {\n  white: '#ffffff',\n  black: '#000000',\n  black50: 'rgba(0, 0, 0, 0.5)',\n  black0: 'rgba(0, 0, 0, 0)',\n  biscay: '#183157',\n  lochmara: '#0088dd',\n  jungleMist: '#bad0db',\n  silverTree: '#63c086',\n  aquaForest: '#5aaf7b',\n  keyLimePie: '#d0c32a',\n  hokeyPokey: '#bcb226',\n  cabaret: '#d34362',\n  mandy: '#e84b6c',\n  dusk: '#4a627f',\n  babyBlue: '#9dcbff',\n  shuttleGray: '#586475',\n  fiord: '#425268',\n  cornflowerBlue: '#02132b'\n}\n","import { createGlobalStyle } from 'styled-components'\nimport bg from 'assets/starry_night_sky.png'\nimport colors from './colors'\n\nexport default createGlobalStyle`\n  html,\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: url(${bg}) no-repeat center center fixed;\n     -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n    font-weight: 700;\n    font-size: 12px;\n    line-height: 20px;\n    @media (max-width : 1336px){\n      font-size: 10px;\n      line-height: 17px;\n    }\n  }\n  a {\n    text-decoration: none;\n    color: initial;\n  }\n\n  button {\n    border:none;\n  }\n  .ant-select-search--inline .ant-select-search__field {\n    color: white;\n  }\n\n  .ant-select, .ant-select-enabled {\n    border: 1px solid ${colors.biscay};\n    border-radius:1px;\n  }\n  \n\n`\n","export default {\n  peerGroupFilters: false,\n  selectedShip: {},\n  selectedProduct: {},\n  selectedItinerary: {},\n  selectedSailDate: {},\n  selectedPeerShip: [],\n  selectedPeerProduct: {},\n  selectedPeerSailingDates: [],\n  filter: {\n    channel: [],\n    bookingType: [],\n    pointOfSaleMarket: [],\n    cabinCategoryClass: [],\n    cabinCategory: [],\n    cabinClassRate: [],\n    rateCategory: [],\n    // maxOccupancy: [],\n    bookedOccupancy: []\n  },\n  peerFilter: {\n    channel: [],\n    bookingType: [],\n    pointOfSaleMarket: [],\n    cabinCategory: [],\n    cabinClassRate: [],\n    rateCategory: [],\n    // maxOccupancy: [],\n    bookedOccupancy: []\n  },\n  filterCount: {\n    channel: 0,\n    bookingType: 0,\n    pointOfSaleMarket: 0,\n    cabinCategoryClass: 0,\n    cabinCategory: 0,\n    cabinClassRate: 0,\n    rateCategory: 0,\n    // maxOccupancy: 0,\n    bookedOccupancy: 0\n  },\n  selectedBookingWeek: null,\n  selectedDeck: null,\n  shipData: {}\n}\n","// store.js\nimport React, { createContext, useReducer } from 'react'\n\n// initial state\nimport initialState from './initialState'\n\nconst store = createContext(initialState)\nconst { Provider } = store\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'togglePeerGroupFilters':\n        return {\n          ...state,\n          peerGroupFilters: !state.peerGroupFilters\n        }\n      case 'setSelectedShip':\n        return {\n          ...state,\n          selectedShip: action.value,\n          selectedProduct: initialState.selectedProduct,\n          selectedItinerary: initialState.selectedItinerary,\n          selectedSailDate: initialState.selectedSailDate\n        }\n      case 'setSelectedProduct':\n        return {\n          ...state,\n          selectedProduct: action.value,\n          selectedItinerary: initialState.selectedItinerary,\n          selectedSailDate: initialState.selectedSailDate\n        }\n      case 'setSelectedItinerary':\n        return {\n          ...state,\n          selectedItinerary: action.value,\n          selectedSailDate: initialState.selectedSailDate\n        }\n      case 'setSelectedSailDate':\n        return {\n          ...state,\n          selectedSailDate: action.value\n        }\n      case 'setSelectedPeerShip':\n        return {\n          ...state,\n          selectedPeerShip: action.value\n        }\n      case 'setSelectedPeerProduct':\n        return {\n          ...state,\n          selectedPeerProduct: action.value\n        }\n      case 'setSelectedPeerSailingDates':\n        return {\n          ...state,\n          selectedPeerSailingDates: action.value\n        }\n      case 'setSelectedSubFilter':\n        return {\n          ...state,\n          filter: {\n            ...state.filter,\n            [action.title]: action.value\n          }\n        }\n      case 'setSelectedPeerSubFilter':\n        return {\n          ...state,\n          peerFilter: {\n            ...state.peerFilter,\n            [action.title]: action.value\n          }\n        }\n      case 'setSelectedSubFilterCount':\n        return {\n          ...state,\n          filterCount: {\n            ...state.filterCount,\n            [action.title]: action.value\n          }\n        }\n      case 'setSelectedBookingWeek':\n        return {\n          ...state,\n          selectedBookingWeek: action.value\n        }\n      case 'setSelectedDeck':\n        return {\n          ...state,\n          selectedDeck: action.value\n        }\n      case 'setShipData':\n        return {\n          ...state,\n          shipData: action.value\n        }\n      default:\n        throw new Error()\n    }\n  }, initialState)\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>\n}\n\nexport { store, StateProvider }\n","import gql from 'graphql-tag'\n\nexport const GET_SHIP_LIST = gql`\n  {\n    shipList {\n      id\n      shipName\n      shipCode\n      classId\n      className\n    }\n  }\n`\nexport const GET_PRODUCT_LIST = gql`\n  query productList($shipId: Int) {\n    productList(shipId: $shipId) {\n      id\n      rdssProductCode\n    }\n  }\n`\n\nexport const GET_PEER_GROUP_PRODUCT_LIST = gql`\n  query peerGroupProductList($shipIdList: [Int]) {\n    peerGroupProductList(shipIdList: $shipIdList) {\n      id\n      rdssProductCode\n    }\n  }\n`\n\nexport const GET_ITINERARY_LIST = gql`\n  query itineraryList($shipId: Int, $productId: Int) {\n    itineraryList(shipId: $shipId, productId: $productId) {\n      id\n      itineraryDesc\n    }\n  }\n`\n\nexport const GET_SAILING_DATE_LIST = gql`\n  query sailingDateList($shipId: Int, $productId: Int, $itineraryId: Int) {\n    sailingDateList(\n      shipId: $shipId\n      productId: $productId\n      itineraryId: $itineraryId\n    ) {\n      id\n      sailingDate\n    }\n  }\n`\n\nexport const GET_SUB_FILTERS = gql`\n  {\n    filter {\n      channel {\n        id\n        value\n      }\n      bookingType {\n        id\n        value\n      }\n      pointOfSaleMarket {\n        id\n        value\n      }\n      cabinCategoryClass {\n        id\n        value\n      }\n      cabinCategory {\n        id\n        value\n      }\n      cabinClassRate {\n        id\n        value\n      }\n      rateCategory {\n        id\n        value\n      }\n      bookedOccupancy {\n        id\n        value\n      }\n    }\n  }\n`\n\nexport const GET_SNAPSHOT_INTERVAL_LIST = gql`\n  {\n    snapshotIntervalList {\n      id\n      interval\n      intervalLabel\n      weekMinimum\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const GET_VISUAL_DECK_LIST = gql`\n  query deckVisualList(\n    $shipId: Int\n    $sailingDateId: Int\n    $productId: Int\n    $itineraryId: Int\n    $interval: Int\n    $bookedOccupancy: [String]\n    $bookingType: [String]\n    $cabinCategory: [Int]\n    $cabinCategoryClass: [Int]\n    $cabinClassRate: [Int]\n    $channel: [Int]\n    $pointOfSaleMarket: [Int]\n    $rateCategory: [Int]\n    $peerGroupShipIds: [Int]\n    $peerGroupProductId: Int\n    $peerGroupStartDate: String\n    $peerGroupEndDate: String\n    $peerGroupBookedOccupancy: [String]\n    $peerGroupBookingType: [String]\n    $peerGroupCabinCategory: [Int]\n    $peerGroupCabinClassRate: [Int]\n    $peerGroupChannel: [Int]\n    $peerGroupPointOfSaleMarket: [Int]\n    $peerGroupRateCategory: [Int]\n  ) {\n    deckVisualList(\n      shipId: $shipId\n      sailingDateId: $sailingDateId\n      productId: $productId\n      itineraryId: $itineraryId\n      interval: $interval\n      bookedOccupancy: $bookedOccupancy\n      bookingType: $bookingType\n      cabinCategory: $cabinCategory\n      cabinCategoryClass: $cabinCategoryClass\n      cabinClassRate: $cabinClassRate\n      channel: $channel\n      pointOfSaleMarket: $pointOfSaleMarket\n      rateCategory: $rateCategory\n      peerGroupShipIds: $peerGroupShipIds\n      peerGroupProductId: $peerGroupProductId\n      peerGroupStartDate: $peerGroupStartDate\n      peerGroupEndDate: $peerGroupEndDate\n      peerGroupBookedOccupancy: $peerGroupBookedOccupancy\n      peerGroupBookingType: $peerGroupBookingType\n      peerGroupCabinCategory: $peerGroupCabinCategory\n      peerGroupCabinClassRate: $peerGroupCabinClassRate\n      peerGroupChannel: $peerGroupChannel\n      peerGroupPointOfSaleMarket: $peerGroupPointOfSaleMarket\n      peerGroupRateCategory: $peerGroupRateCategory\n    )\n  }\n`\nexport const GET_FIRST_SAIL_DATE = gql`\n  {\n    firstSailDate {\n      ship {\n        id\n        shipName\n        shipCode\n        classId\n        className\n      }\n      sailingDate {\n        id\n        sailingDate\n      }\n      interval\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const GET_DECK_LIST = gql`\n  query deckList($shipId: Int) {\n    deckList(shipId: $shipId)\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const GET_SUPPLY_BURNDOWN_CHART = gql`\n  query supplyBurndownChart(\n    $shipId: Int!\n    $sailingDateId: Int!\n    $productId: Int\n    $itineraryId: Int\n    $bookedOccupancy: [String]\n    $bookingType: [String]\n    $cabinCategory: [Int]\n    $cabinCategoryClass: [Int]\n    $cabinClassRate: [Int]\n    $channel: [Int]\n    $pointOfSaleMarket: [Int]\n    $rateCategory: [Int]\n    $peerGroupShipIds: [Int]\n    $peerGroupProductId: Int\n    $peerGroupStartDate: String\n    $peerGroupEndDate: String\n    $peerGroupBookedOccupancy: [String]\n    $peerGroupBookingType: [String]\n    $peerGroupCabinCategory: [Int]\n    $peerGroupCabinCategoryClass: [Int]\n    $peerGroupCabinClassRate: [Int]\n    $peerGroupChannel: [Int]\n    $peerGroupPointOfSaleMarket: [Int]\n    $peerGroupRateCategory: [Int]\n    ) {\n    supplyBurndownChart(\n      shipId: $shipId\n      sailingDateId: $sailingDateId\n      productId: $productId\n      itineraryId: $itineraryId\n      bookedOccupancy: $bookedOccupancy\n      bookingType: $bookingType\n      cabinCategory: $cabinCategory\n      cabinCategoryClass: $cabinCategoryClass\n      cabinClassRate: $cabinClassRate\n      channel: $channel\n      pointOfSaleMarket: $pointOfSaleMarket\n      rateCategory: $rateCategory\n      peerGroupShipIds: $peerGroupShipIds\n      peerGroupProductId: $peerGroupProductId\n      peerGroupStartDate: $peerGroupStartDate\n      peerGroupEndDate: $peerGroupEndDate\n      peerGroupBookedOccupancy: $peerGroupBookedOccupancy\n      peerGroupBookingType: $peerGroupBookingType\n      peerGroupCabinCategory: $peerGroupCabinCategory\n      peerGroupCabinCategoryClass: $peerGroupCabinCategoryClass\n      peerGroupCabinClassRate: $peerGroupCabinClassRate\n      peerGroupChannel: $peerGroupChannel\n      peerGroupPointOfSaleMarket: $peerGroupPointOfSaleMarket\n      peerGroupRateCategory: $peerGroupRateCategory\n    ) {\n      selected {\n        x\n        y\n      }\n      all {\n        x\n        y\n      }\n      peerGroup {\n        x\n        y\n      }\n    }\n  }\n`\n\nexport const GET_CABIN_CATEGORY_CLASS_CHART = gql`\n  query cabinCategoryClassChart(\n    $shipId: Int!\n    $sailingDateId: Int!\n    $interval: Int!\n  ) {\n    cabinCategoryClassChart(\n      shipId: $shipId\n      sailingDateId: $sailingDateId\n      interval: $interval\n    ) {\n      bookedX\n      availableX\n      y\n    }\n  }\n`\n\nexport const GET_DECK_CHART = gql`\n  query deckChart($shipId: Int!, $sailingDateId: Int!, $interval: Int!) {\n    deckChart(\n      shipId: $shipId\n      sailingDateId: $sailingDateId\n      interval: $interval\n    ) {\n      bookedX\n      availableX\n      y\n    }\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport logo from 'assets/logo.png'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  background-color: ${props => props.theme.black50};\n  padding: 1em;\n  color: ${props => props.theme.white};\n  padding: 1em 0em;\n`\n\nconst Logo = styled.img`\n  width: 150px;\n`\n\nconst Header = () => {\n  return (\n    <Container>\n      <Logo src={logo} />\n    </Container>\n  )\n}\n\nexport default Header\n","import styled from 'styled-components'\nimport { Select, Menu, Checkbox, Dropdown, Modal } from 'antd'\n\nexport const StyledSelect = styled(Select)`\n  .ant-select,\n  .ant-select-enabled {\n    border: 1px solid ${props => props.theme.babyBlue};\n  }\n  .ant-select-selection {\n    background-color: ${props => props.theme.black50};\n    border: 1px ${props => props.theme.biscay};\n    font-size: ${props => (props.timeline ? '1.25rem' : '1rem')};\n  }\n\n  .ant-select-selection--multiple .ant-select-selection__choice {\n    background-color: ${props => props.theme.dusk};\n    color: ${props => props.theme.white};\n    border: none;\n  }\n\n  .ant-select-arrow {\n    color: ${props => props.theme.white};\n  }\n\n  .ant-select-selection-selected-value {\n    color: ${props => props.theme.white};\n  }\n\n  .ant-select-disabled,\n  .ant-select-selection {\n    background-color: ${props => props.theme.black50} !important;\n  }\n`\nexport const StyledDropdown = styled(Dropdown)`\n  /* > ul {\n    background-color: ${props => props.theme.black50};\n  } */\n`\n\nexport const StyledMenu = styled(Menu)`\n  max-height: 300px;\n  overflow: scroll;\n  /* background-color: ${props => props.theme.black50} !important;\n  .ant-dropdown-menu {\n    background-color: ${props => props.theme.black50} !important;\n  } */\n`\n\nexport const StyledCheckbox = styled(Checkbox)``\n\nexport const StyledModal = styled(Modal)`\n  .ant-modal-content,\n  .ant-modal-header,\n  .ant-modal-footer {\n    background-color: ${props => props.theme.cornflowerBlue};\n    border: 1px solid ${props => props.theme.dusk};\n  }\n\n  .ant-modal-header {\n    border-bottom: none;\n  }\n\n  .ant-modal-header .ant-modal-title {\n    color: ${props => props.theme.jungleMist};\n    font-size: 1.5em;\n  }\n\n  .ant-modal-close {\n    color: ${props => props.theme.jungleMist};\n  }\n\n  .ant-modal-body {\n    > button {\n      display: inline-block;\n      margin-right: 10px;\n      margin-bottom: 5px;\n    }\n  }\n\n  .ant-modal-footer {\n    border-top: none;\n\n    > div {\n      display: flex;\n      justify-content: space-between;\n    }\n    .ant-btn,\n    .ant-btn-primary {\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      padding: 0.5em 1em;\n      font-weight: 700;\n      font-size: 1rem;\n      border-radius: 2px;\n      cursor: pointer;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n      min-width: 100px;\n      border: none;\n    }\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Select } from 'antd'\nimport moment from 'moment'\nimport { StyledSelect } from './StyledComponents'\n\nconst { Option } = Select\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  margin-right: 1em;\n`\n\nconst FilterSelect = ({\n  label,\n  options,\n  value,\n  onChange,\n  displayKey,\n  width,\n  ...props\n}) => {\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <StyledSelect\n        style={{ width: width || 150 }}\n        value={value}\n        showSearch\n        filterOption={(input, option) =>\n          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }\n        onChange={value => onChange(value)}\n        mode={props.mode}\n        disabled={props.disabled}\n      >\n        {options &&\n          options.map((option, i) => {\n            return displayKey === 'sailingDate' ? (\n              <Option value={option.id} key={'option' + i}>\n                {moment.utc(option[displayKey]).format('MM-DD-YYYY')}\n              </Option>\n            ) : (\n              <Option value={option.id} key={'option' + i}>\n                {option[displayKey]}\n              </Option>\n            )\n          })}\n      </StyledSelect>\n    </Container>\n  )\n}\n\nexport default FilterSelect\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spin } from 'antd'\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Loader = () => {\n  return (\n    <Container>\n      <Spin />\n    </Container>\n  )\n}\n\nexport default Loader\n","import React from 'react'\nimport { Alert } from 'antd'\n\nconst Notification = ({ message, type }) => {\n  return <Alert type={type} message={message} />\n}\n\nexport default Notification\n","import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_PRODUCT_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectProduct = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip, selectedProduct } = state\n  const { loading, error, data } = useQuery(GET_PRODUCT_LIST, {\n    variables: {\n      shipId: selectedShip.id\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const product = data.productList.find(product => product.id === id)\n    dispatch({ type: 'setSelectedProduct', value: product })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Product\"\n      displayKey=\"rdssProductCode\"\n      options={data.productList}\n      value={selectedProduct.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectProduct\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_ITINERARY_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectItinerary = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip, selectedProduct, selectedItinerary } = state\n\n  const { loading, error, data } = useQuery(GET_ITINERARY_LIST, {\n    variables: { shipId: selectedShip.id, productId: selectedProduct.id },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const itinerary = data.itineraryList.find(itinerary => itinerary.id === id)\n    dispatch({ type: 'setSelectedItinerary', value: itinerary })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Itinerary\"\n      displayKey=\"itineraryDesc\"\n      options={data.itineraryList}\n      value={selectedItinerary.id}\n      onChange={onChange}\n      width={250}\n      disabled={!selectedProduct.id}\n    />\n  )\n}\n\nexport default SelectItinerary\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Select } from 'antd'\nimport { StyledSelect } from './StyledComponents'\n\nconst { Option, OptGroup } = Select\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  margin-right: 1em;\n`\n\nconst FilterSelectGroup = ({\n  label,\n  options,\n  value,\n  onChange,\n  displayKey,\n  grouping,\n  width,\n  ...props\n}) => {\n  const groups = [...new Set(options.map(item => item[grouping]))]\n\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <StyledSelect\n        style={{ width: width || 150 }}\n        value={value}\n        onChange={value => onChange(value)}\n        mode={props.mode}\n      >\n        {groups.map((group, i) => {\n          return (\n            <OptGroup label={group} key={group + i}>\n              {options\n                .filter(option => option[grouping] === group)\n                .map((option, i) => {\n                  return (\n                    <Option value={option.id} key={'option' + i}>\n                      {option[displayKey]}\n                    </Option>\n                  )\n                })}\n            </OptGroup>\n          )\n        })}\n      </StyledSelect>\n    </Container>\n  )\n}\n\nexport default FilterSelectGroup\n","import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelectGroup from 'components/common/FilterSelectGroup'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SHIP_LIST } from 'graphql/queries'\n\nconst SelectShip = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedShip } = state\n\n  const { loading, error, data } = useQuery(GET_SHIP_LIST)\n\n  const onChange = id => {\n    const ship = data.shipList.find(ship => ship.id === id)\n    dispatch({ type: 'setSelectedShip', value: ship })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelectGroup\n      label=\"Ship\"\n      displayKey=\"shipName\"\n      grouping=\"className\"\n      options={data.shipList}\n      value={selectedShip.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectShip\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store.js'\n\n// Ant design components\nimport { Switch } from 'antd'\n\n// Styled Components\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Label = styled.span`\n  margin-right: 1em;\n`\n\nconst StyledSwitch = styled(Switch)``\n\nconst PeerGroupToggle = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { peerGroupFilters } = state\n\n  const onToggleChange = () => {\n    dispatch({ type: 'togglePeerGroupFilters' })\n  }\n\n  return (\n    <Container>\n      <Label>Peer Comparison</Label>\n      <StyledSwitch checked={peerGroupFilters} onChange={onToggleChange} />\n    </Container>\n  )\n}\n\nexport default PeerGroupToggle\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SAILING_DATE_LIST } from 'graphql/queries'\n\nconst SelectSailDate = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate\n  } = state\n\n  const { loading, error, data } = useQuery(GET_SAILING_DATE_LIST, {\n    variables: {\n      shipId: selectedShip.id,\n      productId: selectedProduct.id,\n      itineraryId: selectedItinerary.id\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = value => {\n    const sailDate = data.sailingDateList.find(date => date.id === value)\n    dispatch({ type: 'setSelectedSailDate', value: sailDate })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Sail Date\"\n      displayKey=\"sailingDate\"\n      options={data.sailingDateList}\n      value={selectedSailDate.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectSailDate\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0.5em 1em;\n  font-weight: 700;\n  font-size: 1rem;\n  border-radius: 2px;\n  cursor: pointer;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n  min-width: 100px;\n  border: none;\n`\n\nconst Button = ({ children, ...props }) => {\n  return <StyledButton {...props}>{children}</StyledButton>\n}\n\nexport default Button\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst StyledIcon = styled(FontAwesomeIcon)`\n  margin: 0px 5px;\n`\n\nconst Icon = ({ icon }) => {\n  return <StyledIcon icon={icon}></StyledIcon>\n}\n\nexport default Icon\n","import React, { useContext, useEffect, useState } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport Icon from 'components/common/Icon'\n\nconst Download = styled.button`\n  background-color: #80cbc4;\n  margin-left: auto;\n  color: ${props => props.theme.black};\n  padding: 0.5em 2em;\n  border-radius: 3px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nconst CsvDownload = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { shipData } = state\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    const decks = Object.keys(shipData)\n    const flatData = decks.map(deck => shipData[deck]).flat()\n\n    const peerGroupData = flatData.length !== 0 && Object.prototype.hasOwnProperty.call(flatData[0], 'category')\n\n    const data = flatData.map(row => {\n      const obj = {\n        deck: row.deck,\n        cabinNumber: row.cabinNumber,\n        bookingStatus: row.bookingStatus,\n        cabinCapacity: row.cabinCapacity,\n        bookedOccupancy: row.bookedOccupancy\n      }\n      if (peerGroupData) {\n        obj.category = row.category\n        obj.selectedPercent = row.selectedPercent\n        obj.peerGroupPercent = row.peerGroupPercent\n        obj.difference = row.difference\n      }\n      return obj\n    })\n\n    setData(data)\n  }, [shipData])\n\n  const generateCsv = () => {\n    const csvRows = []\n    const headers = Object.keys(data[0])\n    csvRows.push(headers.map(header => `\"${('' + header).replace(/\"/g, '\\\\\"')}\"`).join(','))\n\n    for (const row of data) {\n      csvRows.push(headers.map(header => `\"${('' + row[header]).replace(/\"/g, '\\\\\"')}\"`).join(','))\n    }\n\n    const csvData = csvRows.join('\\n')\n\n    const blob = new Blob([csvData], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.setAttribute('hidden', '')\n    a.setAttribute('href', url)\n    a.setAttribute('download', 'shipData.csv')\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n  }\n\n  if (!data.length) return null\n\n  return (\n    <Download onClick={() => generateCsv()}>\n      <Icon icon=\"download\" />\n      Download CSV\n    </Download>\n  )\n}\n\nexport default CsvDownload\n","export const getApi = () => {\n\tconst REACT_APP_STAGE = process.env.REACT_APP_STAGE\n\treturn REACT_APP_STAGE === 'dev'\n\t\t? 'https://sj9yv26472.execute-api.us-east-2.amazonaws.com/dev/graphql'\n\t\t: REACT_APP_STAGE === 'alpha'\n\t\t? 'https://sk9ofwrp21.execute-api.us-east-2.amazonaws.com/alpha/graphql'\n\t\t: REACT_APP_STAGE === 'beta'\n\t\t? 'https://carrhqe4gg.execute-api.us-east-2.amazonaws.com/beta/graphql'\n\t\t: REACT_APP_STAGE === 'prod'\n\t\t? 'https://zarlfah6m2.execute-api.us-east-2.amazonaws.com/prod/graphql'\n\t\t: 'http://localhost:4000/graphql'\n}\n\nexport const getFilterVariables = (\n\tshipId,\n\tsailingDateId,\n\tinterval,\n\tproductId,\n\titineraryId,\n\tpeerGroupFilters,\n\tpeerGroupShipIds,\n\tpeerGroupProductId,\n\tpeerGroupStartDate,\n\tpeerGroupEndDate,\n\tfilter = {},\n\tpeerFilter = {},\n\tfilterCount = {}\n) => {\n\tconst variables = {}\n\tif (peerGroupFilters) {\n\t\tvariables.peerGroupShipIds = peerGroupShipIds\n\t\tvariables.peerGroupProductId = peerGroupProductId\n\t\tvariables.peerGroupStartDate = peerGroupStartDate\n\t\tvariables.peerGroupEndDate = peerGroupEndDate\n\n\t\tObject.keys(peerFilter)\n\t\t\t.filter((key) => {\n\t\t\t\treturn peerFilter[key].length !== filterCount[key]\n\t\t\t})\n\t\t\t.forEach((key) => {\n\t\t\t\tconst filterKey =\n\t\t\t\t\tkey === 'bookedOccupancy' || key === 'bookingType' ? 'value' : 'id'\n\t\t\t\tconst arr = peerFilter[key].map((v) => v[filterKey])\n\t\t\t\tconst variableName =\n\t\t\t\t\tkey === 'bookedOccupancy'\n\t\t\t\t\t\t? 'peerGroupBookedOccupancy'\n\t\t\t\t\t\t: key === 'bookingType'\n\t\t\t\t\t\t? 'peerGroupBookingType'\n\t\t\t\t\t\t: key === 'cabinCategory'\n\t\t\t\t\t\t? 'peerGroupCabinCategory'\n\t\t\t\t\t\t: key === 'cabinClassRate'\n\t\t\t\t\t\t? 'peerGroupCabinClassRate'\n\t\t\t\t\t\t: key === 'channel'\n\t\t\t\t\t\t? 'peerGroupChannel'\n\t\t\t\t\t\t: key === 'pointOfSaleMarket'\n\t\t\t\t\t\t? 'peerGroupPointOfSaleMarket'\n\t\t\t\t\t\t: key === 'rateCategory'\n\t\t\t\t\t\t? 'peerGroupRateCategory'\n\t\t\t\t\t\t: key === 'cabinCategoryClass'\n\t\t\t\t\t\t? 'peerGroupCabinCategoryClass'\n\t\t\t\t\t\t: ''\n\n\t\t\t\tif (key) {\n\t\t\t\t\tvariables[variableName] = arr\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\tvariables.shipId = shipId\n\tvariables.sailingDateId = sailingDateId\n\tvariables.interval = interval\n\tvariables.productId = productId\n\tvariables.itineraryId = itineraryId\n\n\tObject.keys(filter)\n\t\t.filter((key) => {\n\t\t\treturn filter[key].length !== filterCount[key]\n\t\t})\n\t\t.forEach((key) => {\n\t\t\tconst filterKey =\n\t\t\t\tkey === 'bookedOccupancy' || key === 'bookingType' ? 'value' : 'id'\n\t\t\tconst arr = filter[key].map((v) => v[filterKey])\n\t\t\tvariables[key] = arr\n\t\t})\n\n\treturn variables\n}\n","import React, { useContext } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\n\n// Project Imports\nimport SelectProduct from './SelectProduct'\nimport SelectItinerary from './SelectItinerary'\nimport SelectShip from './SelectShip'\nimport PeerGroupToggle from './PeerGroupToggle'\nimport SelectSailDate from './SelectSailDate'\nimport Button from 'components/common/Button'\nimport CsvDownload from './CsvDownload'\nimport { getFilterVariables } from 'helper'\n\n// Graphql\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  background-color: rgb(0, 0, 0, 0);\n  color: ${props => props.theme.jungleMist};\n  padding: 1em 0em;\n  > div {\n    margin-right: 2em;\n  }\n`\n\nconst Apply = styled(Button)`\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n  background-color: ${props => props.theme.lochmara};\n  color: ${props => props.theme.white};\n`\n\nconst MainFilters = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const enableApply = () =>\n    selectedShip && selectedProduct && selectedItinerary && selectedSailDate\n\n  return (\n    <Container>\n      <PeerGroupToggle />\n      <SelectShip />\n      <SelectProduct />\n      <SelectItinerary />\n      <SelectSailDate />\n      <Apply\n        primary\n        disabled={!enableApply()}\n        onClick={() =>\n          applyFilters({\n            variables: getFilterVariables(\n              selectedShip.id,\n              selectedSailDate.id,\n              selectedBookingWeek,\n              selectedProduct.id,\n              selectedItinerary.id,\n              peerGroupFilters,\n              selectedPeerShip,\n              selectedPeerProduct.id,\n              selectedPeerSailingDates[0],\n              selectedPeerSailingDates[1],\n              filter,\n              peerFilter,\n              filterCount\n            )\n          })\n        }\n      >\n        Apply\n      </Apply>\n      <CsvDownload />\n    </Container>\n  )\n}\n\nexport default MainFilters\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { store } from 'context/store'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\nimport Notification from 'components/common/Notification'\nimport Loader from 'components/common/Loader'\n\n// GQL\nimport { GET_SHIP_LIST } from 'graphql/queries'\n\nconst SelectPeerShip = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedPeerShip } = state\n  const { loading, error, data } = useQuery(GET_SHIP_LIST, {\n    fetchPolicy: 'network-only'\n  })\n  const onChange = value => {\n    dispatch({ type: 'setSelectedPeerShip', value })\n  }\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Ship(s)\"\n      mode=\"multiple\"\n      displayKey=\"shipName\"\n      options={data.shipList}\n      value={selectedPeerShip}\n      width={300}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectPeerShip\n","import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport FilterSelect from 'components/common/FilterSelect'\n\n// GQL\nimport { GET_PEER_GROUP_PRODUCT_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst SelectPeerProduct = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedPeerShip, selectedPeerProduct } = state\n  const { loading, error, data } = useQuery(GET_PEER_GROUP_PRODUCT_LIST, {\n    variables: {\n      shipIdList: selectedPeerShip\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const onChange = id => {\n    const product = data.peerGroupProductList.find(product => product.id === id)\n    dispatch({ type: 'setSelectedPeerProduct', value: product })\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <FilterSelect\n      label=\"Product(s)\"\n      displayKey=\"rdssProductCode\"\n      options={data.peerGroupProductList}\n      value={selectedPeerProduct.id}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default SelectPeerProduct\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { DatePicker } from 'antd'\nimport { store } from 'context/store'\nimport moment from 'moment'\n\nconst { RangePicker } = DatePicker\n\nconst StyledRangePicker = styled(RangePicker)`\n  .ant-input {\n    background-color: ${props => props.theme.black50};\n    color: ${props => props.theme.white};\n    border: 1px solid ${props => props.theme.biscay};\n  }\n  .ant-calendar-range-picker-separator {\n    color: ${props => props.theme.white};\n  }\n\n  .ant-calendar-picker-icon {\n    color: ${props => props.theme.white};\n  }\n\n  .ant-calendar-picker-clear {\n    color: ${props => props.theme.white};\n  }\n`\n\nconst SelectPeerSailingDates = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedPeerSailingDates } = state\n\n  const onChange = (date, dateString) => {\n    if (date.length) {\n      dispatch({ type: 'setSelectedPeerSailingDates', value: dateString })\n    } else dispatch({ type: 'setSelectedPeerSailingDates', value: [] })\n  }\n\n  return (\n    <StyledRangePicker\n      format={'YYYY/MM/DD'}\n      onChange={onChange}\n      value={\n        selectedPeerSailingDates.length\n          ? [\n              moment(selectedPeerSailingDates[0]),\n              moment(selectedPeerSailingDates[1])\n            ]\n          : []\n      }\n    />\n  )\n}\n\nexport default SelectPeerSailingDates\n","import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useLazyQuery } from '@apollo/client'\nimport { Menu, Dropdown, Checkbox } from 'antd'\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.5em 1em;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 2px;\n  cursor: pointer;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst ApplyButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.25em 0.25em;\n  font-weight: 500;\n  font-size: 0.75rem;\n  border-radius: 2px;\n  cursor: pointer;\n  min-width: 50px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst StyledMenu = styled(Menu)`\n  max-height: 300px;\n  overflow: scroll;\n`\n\nconst StyledCheckbox = styled(Checkbox)``\n\nconst PeerDropdownMenu = ({ options, title, displayKey, ...props }) => {\n  const [visible, setVisible] = useState(false)\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  // keep local state array for save button\n  const [subFilter, setSubFilter] = useState(peerFilter[title])\n\n  useEffect(() => {\n    setSubFilter(peerFilter[title])\n  }, [peerFilter, title])\n\n  const handleCheck = ({ id, value }) => {\n    const foundFilter = subFilter.find(v => v.id === id)\n    if (foundFilter) {\n      setSubFilter(subFilter.filter(v => v.id !== id))\n    } else {\n      setSubFilter([...subFilter, { id, value }])\n    }\n  }\n\n  const handleSave = e => {\n    if (e.key === 'save') {\n      dispatch({ type: 'setSelectedPeerSubFilter', title, value: subFilter })\n      const peerFilterCopy = { ...peerFilter }\n      setVisible(false)\n      peerFilterCopy[title] = subFilter\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          selectedBookingWeek,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilterCopy,\n          filterCount\n        )\n      })\n    }\n  }\n\n  const handleVisibleChange = v => {\n    setVisible(v)\n    if (!v) {\n      setSubFilter(peerFilter[title])\n    }\n  }\n\n  const formatTitle = s => {\n    const split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ')\n    return split.charAt(0).toUpperCase() + split.slice(1)\n  }\n\n  const menu = (\n    <StyledMenu onClick={handleSave}>\n      {options.map((option, i) => (\n        <Menu.Item key={'option' + i}>\n          <StyledCheckbox\n            onChange={() => handleCheck(option)}\n            checked={!!subFilter.find(f => f.id === option.id)}\n          >\n            {option[displayKey]}\n          </StyledCheckbox>\n        </Menu.Item>\n      ))}\n      <Menu.Item key=\"save\">\n        <ApplyButton>Apply</ApplyButton>\n      </Menu.Item>\n    </StyledMenu>\n  )\n\n  return (\n    <Dropdown\n      overlay={menu}\n      onVisibleChange={handleVisibleChange}\n      visible={visible}\n    >\n      <Button>{formatTitle(title)}</Button>\n    </Dropdown>\n  )\n}\n\nexport default PeerDropdownMenu\n","import React, { useState, useContext } from 'react'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUB_FILTERS } from 'graphql/queries'\nimport styled from 'styled-components'\nimport Button from 'components/common/Button'\nimport Icon from 'components/common/Icon'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport PeerDropdownMenu from './PeerDropdownMenu'\nimport { StyledModal } from 'components/common/StyledComponents'\n\nconst OpenModal = styled(Button)`\n  background-color: ${props => props.theme.babyBlue};\n  color: ${props => props.theme.black};\n`\n\nconst PeerSubFilters = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { peerFilter, filterCount } = state\n  const { loading, error, data } = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter)\n        .filter(v => v !== '__typename' && v !== 'cabinCategoryClass')\n        .forEach(subFilter => {\n          const arr = data.filter[subFilter].map(v => ({\n            id: v.id,\n            value: v.value\n          }))\n          dispatch({\n            type: 'setSelectedPeerSubFilter',\n            title: subFilter,\n            value: arr\n          })\n          dispatch({\n            type: 'setSelectedSubFilterCount',\n            title: subFilter,\n            value: arr.length\n          })\n        })\n    }\n  })\n\n  const [visible, setVisible] = useState(false)\n\n  const openModal = () => {\n    setVisible(true)\n  }\n\n  const handleApply = () => {\n    setVisible(false)\n  }\n\n  const handleCancel = () => {\n    setVisible(false)\n  }\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <OpenModal onClick={() => openModal()}>\n        {\n          Object.keys(peerFilter).filter(key => {\n            return peerFilter[key].length !== filterCount[key]\n          }).length\n        }{' '}\n        Filters <Icon icon=\"edit\" />\n      </OpenModal>\n      <StyledModal\n        title=\"Peer Group Filters\"\n        visible={visible}\n        onOk={handleApply}\n        onCancel={handleCancel}\n        okText=\"Apply\"\n        footer={null}\n      >\n        {Object.keys(data.filter)\n          .filter(v => v !== '__typename' && v !== 'cabinCategoryClass')\n          .map((subFilter, i) => {\n            const options = data.filter[subFilter]\n            return (\n              <PeerDropdownMenu\n                options={options}\n                title={subFilter}\n                key={subFilter + i}\n                displayKey={'value'}\n              />\n            )\n          })}\n      </StyledModal>\n    </>\n  )\n}\n\nexport default PeerSubFilters\n","import React from 'react'\nimport styled from 'styled-components'\n\n// Project Imports\nimport SelectPeerShip from './SelectPeerShip'\nimport SelectPeerProduct from './SelectPeerProduct'\nimport SelectPeerSailingDates from './SelectPeerSailingDates'\nimport PeerSubFilters from './PeerSubFilters'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${props => props.theme.jungleMist};\n  padding: 1em 0em 0em 2em;\n  > div,\n  .ant-calendar-picker {\n    margin-right: 2em;\n  }\n`\n\nconst Title = styled.div`\n  color: ${props => props.theme.jungleMist};\n  font-size: 1.5em;\n`\n\nconst PeerGroupFilters = () => {\n  return (\n    <Container>\n      <Title>Peer Group</Title>\n      <SelectPeerShip />\n      <SelectPeerProduct />\n      <SelectPeerSailingDates />\n      <PeerSubFilters />\n    </Container>\n  )\n}\n\nexport default PeerGroupFilters\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\n\n// Project Imports\nimport MainFilters from './main-filters'\nimport PeerGroupFilters from './peer-group-filters'\n\nconst Container = styled.div`\n  background-color: rgb(0, 0, 0, 0);\n  padding: 2em 2em;\n  font-size: 1rem;\n`\n\nconst Filters = () => {\n  const globalState = useContext(store)\n  const {\n    state: { peerGroupFilters }\n  } = globalState\n\n  return (\n    <Container>\n      <MainFilters />\n      {peerGroupFilters && <PeerGroupFilters />}\n    </Container>\n  )\n}\n\nexport default Filters\n","import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useLazyQuery } from '@apollo/client'\n\nimport { GET_VISUAL_DECK_LIST } from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\nimport {\n  StyledMenu,\n  StyledCheckbox,\n  StyledDropdown\n} from 'components/common/StyledComponents'\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.jungleMist};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.5em 1em;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 2px;\n  cursor: pointer;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst ApplyButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.white};\n  background-color: ${props => props.theme.biscay};\n  padding: 0.25em 0.25em;\n  font-weight: 500;\n  font-size: 0.75rem;\n  border-radius: 2px;\n  cursor: pointer;\n  min-width: 50px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.24), 0 0 2px 0 rgba(0, 0, 0, 0.12);\n`\n\nconst DropdownMenu = ({ options, title, displayKey, ...props }) => {\n  const [visible, setVisible] = useState(false)\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  // keep local state array for save button\n  const [subFilter, setSubFilter] = useState(filter[title])\n\n  useEffect(() => {\n    setSubFilter(filter[title])\n  }, [filter, title])\n\n  const handleCheck = ({ id, value }) => {\n    const foundFilter = subFilter.find(v => v.id === id)\n    if (foundFilter) {\n      setSubFilter(subFilter.filter(v => v.id !== id))\n    } else {\n      setSubFilter([...subFilter, { id, value }])\n    }\n  }\n\n  const handleSave = e => {\n    if (e.key === 'save') {\n      dispatch({ type: 'setSelectedSubFilter', title, value: subFilter })\n      const filterCopy = { ...filter }\n      setVisible(false)\n      filterCopy[title] = subFilter\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          selectedBookingWeek,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filterCopy,\n          peerFilter,\n          filterCount\n        )\n      })\n    }\n  }\n\n  const handleVisibleChange = v => {\n    setVisible(v)\n    if (!v) {\n      setSubFilter(filter[title])\n    }\n  }\n\n  const formatTitle = s => {\n    const split = s.replace(/([a-z](?=[A-Z]))/g, '$1 ')\n    return split.charAt(0).toUpperCase() + split.slice(1)\n  }\n\n  const menu = (\n    <StyledMenu onClick={handleSave}>\n      {options.map((option, i) => (\n        <StyledMenu.Item key={'option' + i}>\n          <StyledCheckbox\n            onChange={() => handleCheck(option)}\n            checked={!!subFilter.find(f => f.id === option.id)}\n          >\n            {option[displayKey]}\n          </StyledCheckbox>\n        </StyledMenu.Item>\n      ))}\n      <StyledMenu.Item key=\"save\">\n        <ApplyButton>Apply</ApplyButton>\n      </StyledMenu.Item>\n    </StyledMenu>\n  )\n\n  return (\n    <StyledDropdown\n      overlay={menu}\n      onVisibleChange={handleVisibleChange}\n      visible={visible}\n    >\n      <Button>{formatTitle(title)}</Button>\n    </StyledDropdown>\n  )\n}\n\nexport default DropdownMenu\n","import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/client'\n\n// Project Components\nimport DropdownMenu from './DropdownMenu'\n\n// GQL\nimport { GET_SUB_FILTERS } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  > button {\n    margin-left: 1em;\n  }\n`\nconst SubFilters = () => {\n  const globalState = useContext(store)\n  const { dispatch } = globalState\n  const { loading, error, data } = useQuery(GET_SUB_FILTERS, {\n    fetchPolicy: 'network-only',\n    onCompleted: data => {\n      Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .forEach(subFilter => {\n          const arr = data.filter[subFilter].map(v => ({ id: v.id, value: v.value }))\n          dispatch({\n            type: 'setSelectedSubFilter',\n            title: subFilter,\n            value: arr\n          })\n          dispatch({\n            type: 'setSelectedSubFilterCount',\n            title: subFilter,\n            value: arr.length\n          })\n        })\n    }\n  })\n\n  if (loading) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n\n  return (\n    <Container>\n      {Object.keys(data.filter)\n        .filter(v => v !== '__typename')\n        .map((subFilter, i) => {\n          const options = data.filter[subFilter]\n          return (\n            <DropdownMenu\n              options={options}\n              title={subFilter}\n              key={subFilter + i}\n              displayKey={'value'}\n            />\n          )\n        })}\n    </Container>\n  )\n}\n\nexport default SubFilters\n","import colors from 'styles/colors'\n\nexport const hoverInfo = peerGroupFilters => ({\n  hoverlabel: {\n    bgcolor: colors.biscay,\n    bordercolor: colors.jungleMist,\n    font: {\n      color: colors.white,\n      size: 16\n    }\n  },\n  hovertemplate:\n    peerGroupFilters\n      ? '   %{customdata.category}   <br />   Booked %{customdata.selectedPercent}%   <br />   Average %{customdata.peerGroupPercent}%   <br />   Difference %{customdata.difference}%   <br /><br /><extra></extra>'\n      : '   Room %{customdata.cabinNumber}   <br />   %{customdata.status}   <br />   Max %{customdata.cabinCapacity}   <br />   Booked %{customdata.bookedOccupancy}   <br /><br /><extra></extra>'\n})\n\nexport const layout = {\n  margin: {\n    l: 0,\n    r: 0,\n    t: 0,\n    b: 0,\n    pad: 0\n  },\n  scene: {\n    xaxis: {\n      title: '',\n      showgrid: false,\n      zeroline: false,\n      showticklabels: false,\n      showspikes: false\n    },\n    yaxis: {\n      title: '',\n      showgrid: false,\n      zeroline: false,\n      showticklabels: false,\n      showspikes: false\n    },\n    zaxis: {\n      title: '',\n      showgrid: false,\n      zeroline: false,\n      showline: false,\n      showticklabels: false,\n      showspikes: false\n    },\n    aspectmode: 'manual',\n    aspectratio: {\n      x: 0.5,\n      y: 1,\n      z: 0.3\n    },\n    camera: { center: { x: 0, y: 0, z: 0 }, eye: { x: 0.35, y: 0.35, z: 0.2 } }\n  },\n  paper_bgcolor: colors.black0,\n  plot_bgcolor: colors.black0\n}\n","import colors from 'styles/colors'\nimport { hoverInfo } from './config'\n\nconst getStatus = (point, colorCount, peerGroupFilters) => {\n  const statusObj = {}\n  const even = point.cabinNumber % 2 === 0\n\n  if (!peerGroupFilters) {\n    statusObj.status =\n      point.bookingStatus === 'B'\n        ? 'BOOKED'\n        : point.bookingStatus === 'U'\n          ? 'UNBOOKED'\n          : 'CANCELLED'\n    statusObj.bookedOccupancy = point.bookedOccupancy\n      ? point.bookedOccupancy\n      : 'N/A'\n    statusObj.cabinCapacity = point.cabinCapacity ? point.cabinCapacity : 'N/A'\n    if (point.bookingStatus === null) {\n      if (even) {\n        statusObj.color = colorCount.lastInvalidEven\n          ? colors.shuttleGray\n          : colors.fiord\n        colorCount.lastInvalidEven = !colorCount.lastInvalidEven\n      } else {\n        statusObj.color = colorCount.lastInvalidOdd\n          ? colors.shuttleGray\n          : colors.fiord\n        colorCount.lastInvalidOdd = !colorCount.lastInvalidOdd\n      }\n    } else if (point.bookingStatus === 'U' || point.bookingStatus === 'C') {\n      if (even) {\n        statusObj.color = colorCount.lastUnbookedEven\n          ? colors.cabaret\n          : colors.mandy\n        colorCount.lastUnbookedEven = !colorCount.lastUnbookedEven\n      } else {\n        statusObj.color = colorCount.lastUnbookedOdd\n          ? colors.cabaret\n          : colors.mandy\n        colorCount.lastUnbookedOdd = !colorCount.lastUnbookedOdd\n      }\n    } else if (point.bookedOccupancy < point.cabinCapacity) {\n      if (even) {\n        statusObj.color = colorCount.lastPartEven\n          ? colors.keyLimePie\n          : colors.hokeyPokey\n        colorCount.lastPartEven = !colorCount.lastPartEven\n      } else {\n        statusObj.color = colorCount.lastPartOdd\n          ? colors.keyLimePie\n          : colors.hokeyPokey\n        colorCount.lastPartOdd = !colorCount.lastPartOdd\n      }\n    } else {\n      if (even) {\n        statusObj.color = colorCount.lastFullEven\n          ? colors.silverTree\n          : colors.aquaForest\n        colorCount.lastFullEven = !colorCount.lastFullEven\n      } else {\n        statusObj.color = colorCount.lastFullOdd\n          ? colors.silverTree\n          : colors.aquaForest\n        colorCount.lastFullOdd = !colorCount.lastFullOdd\n      }\n    }\n  } else {\n    statusObj.category = point.category ? point.category : 'N/A'\n    statusObj.selectedPercent = point.selectedPercent ? point.selectedPercent : 'N/A'\n    statusObj.peerGroupPercent = point.peerGroupPercent ? point.peerGroupPercent : 'N/A'\n    statusObj.difference = point.difference ? point.difference : 'N/A'\n\n    const colorArray = ['#D4F5E9',\n      '#BAEEED',\n      '#92E1F2',\n      '#83DDF4',\n      '#66D5F8',\n      '#4ACCFB',\n      '#35C6F2',\n      '#4FC8DE',\n      '#68CAC1',\n      '#7FCCA6',\n      '#98CE88',\n      '#B2D06B',\n      '#C9D250',\n      '#E3D533',\n      '#E1C43F',\n      '#DEB14A',\n      '#DC9F58',\n      '#D98D64',\n      '#D67B70',\n      '#D4697C'].reverse()\n\n    const difference = parseInt(point.difference) >= 20 ? 20 : parseInt(point.difference) <= -20 ? -20 : parseInt(point.difference)\n    const offset = 20\n    const tick = offset * 2 / colorArray.length\n    const num = Math.round((difference + offset) / tick) - 1\n    const index = num === -1 ? 0 : num\n    statusObj.color = isNaN(index) ? colors.shuttleGray : colorArray[index]\n  }\n\n  return statusObj\n}\n\nconst getPolygonCoordinates = (\n  point,\n  length,\n  customdata,\n  colorCount,\n  peerGroupFilters\n) => {\n  const {\n    color,\n    status,\n    bookedOccupancy,\n    cabinCapacity,\n    category,\n    selectedPercent,\n    peerGroupPercent,\n    difference\n  } = getStatus(point, colorCount, peerGroupFilters)\n\n  const h0 = point.plotY0 * length // Starting Height\n  const h1 = point.plotY1 * length // Ending Height\n  // Vertices of the polygon\n  const v0 = point.plotX0 + h0\n  const v1 = point.plotX1 + h0\n  const v2 = point.plotX0 + h1\n  const v3 = point.plotX1 + h1\n\n  // Set hover info\n  customdata[v0] = {\n    cabinNumber: point.cabinNumber,\n    status,\n    bookedOccupancy,\n    cabinCapacity,\n    category,\n    selectedPercent,\n    peerGroupPercent,\n    difference\n  }\n  customdata[v1] = customdata[v0]\n\n  return {\n    i: [v0, v1],\n    j: [v1, v2],\n    k: [v2, v3],\n    facecolor: [color, color]\n  }\n}\n\nexport const createDeck = (data, deck, selectedDeck, peerGroupFilters) => {\n  const x = []\n  const y = []\n  const z = []\n  const customdata = []\n  const length = 150\n  for (let y0 = 0; y0 < length; y0++) {\n    for (let x0 = 0; x0 < length; x0++) {\n      x.push(x0)\n      y.push(y0)\n      customdata.push({\n        cabinNumber: '',\n        status: '',\n        bookedOccupancy: '',\n        cabinCapacity: '',\n        category: '',\n        selectedPercent: '',\n        peerGroupPercent: '',\n        difference: ''\n      })\n      z.push(deck)\n    }\n  }\n  const i = []\n  const j = []\n  const k = []\n  const facecolor = []\n  const colorCount = {\n    lastFullEven: true,\n    lastFullOdd: true,\n    lastPartEven: true,\n    lastPartOdd: true,\n    lastUnbookedEven: true,\n    lastUnbookedOdd: true,\n    lastInvalidEven: true,\n    lastInvalidOdd: true\n  }\n  data.forEach(point => {\n    const coords = getPolygonCoordinates(\n      point,\n      length,\n      customdata,\n      colorCount,\n      peerGroupFilters\n    )\n    i.push(...coords.i)\n    j.push(...coords.j)\n    k.push(...coords.k)\n    facecolor.push(...coords.facecolor)\n  })\n\n  const hover =\n    deck === selectedDeck ? hoverInfo(peerGroupFilters) : { hoverinfo: 'none' }\n  const opacity = deck === selectedDeck ? 1 : 0.3\n  return {\n    x,\n    y,\n    z,\n    i,\n    j,\n    k,\n    opacity,\n    facecolor,\n    customdata,\n    ...hover,\n    flatshading: true,\n    type: 'mesh3d'\n  }\n}\n","import React, { useState, useEffect, useContext } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport Plot from 'react-plotly.js'\nimport { layout } from './config'\nimport { createDeck } from './helper'\n\nconst Container = styled.div`\n  width: 100%;\n  height: 700px;\n`\n\nconst ShipViz = () => {\n  const [plotData, setPlotdata] = useState([])\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedDeck, shipData, peerGroupFilters } = state\n  useEffect(() => {\n    const decks = Object.keys(shipData)\n    const coords = decks.map(deck =>\n      createDeck(shipData[deck], parseInt(deck), selectedDeck, peerGroupFilters)\n    )\n    setPlotdata(coords)\n  }, [selectedDeck, peerGroupFilters, shipData])\n  return !plotData.length ? (\n    <Container />\n  ) : (\n    <Plot\n      data={plotData}\n      layout={layout}\n      revision={Math.random()}\n      useResizeHandler={true}\n      style={{ width: '100%', height: '700px' }}\n    />\n  )\n}\n\nexport default ShipViz\n","import React, { useContext, useEffect } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { Select, Icon } from 'antd'\nimport { StyledSelect } from 'components/common/StyledComponents'\n\n// GQL\nimport {\n  GET_SNAPSHOT_INTERVAL_LIST,\n  GET_VISUAL_DECK_LIST\n} from 'graphql/queries'\nimport { getFilterVariables } from 'helper'\n// Project Imports\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\n\nconst { Option } = Select\n\nconst Container = styled.div`\n  flex: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst ChangeInterval = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst StyledIcon = styled(Icon)`\n  font-size: 2em;\n\n  > svg {\n    color: ${props => props.theme.babyBlue};\n    cursor: pointer;\n  }\n`\n\nconst IntervalMeter = styled.div`\n  display: flex;\n  position: relative;\n  width: 90%;\n  height: 10px;\n  border-radius: 3px;\n  background-color: ${props => props.theme.dusk};\n`\n\nconst IntervalPosition = styled.div`\n  position: absolute;\n  left: 0;\n  height: 100%;\n  border-radius: 3px;\n  width: ${props => props.width};\n  background-color: ${props => props.theme.babyBlue};\n`\n\nconst Timeline = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount,\n    shipData\n  } = state\n\n  const { loading, error, data } = useQuery(GET_SNAPSHOT_INTERVAL_LIST, {\n    fetchPolicy: 'network-only'\n  })\n\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  const handleSelect = value => {\n    dispatch({ type: 'setSelectedBookingWeek', value })\n\n    applyFilters({\n      variables: getFilterVariables(\n        selectedShip.id,\n        selectedSailDate.id,\n        value,\n        selectedProduct.id,\n        selectedItinerary.id,\n        peerGroupFilters,\n        selectedPeerShip,\n        selectedPeerProduct.id,\n        selectedPeerSailingDates[0],\n        selectedPeerSailingDates[1],\n        filter,\n        peerFilter,\n        filterCount\n      )\n    })\n  }\n\n  useEffect(() => {\n    const onCompleted = data => {\n      if (data.snapshotIntervalList.length) {\n        dispatch({\n          type: 'setSelectedBookingWeek',\n          value:\n            data.snapshotIntervalList[data.snapshotIntervalList.length - 1]\n              .interval\n        })\n      }\n    }\n    const onError = error => {\n      return <Notification type=\"error\" message={error.message} />\n    }\n    if (onCompleted || onError) {\n      if (onCompleted && !loading && !error) {\n        onCompleted(data)\n      } else if (onError && !loading && error) {\n        onError(error)\n      }\n    }\n  }, [loading, data, error, dispatch])\n\n  const handleStep = dir => {\n    const { snapshotIntervalList } = data\n\n    const getCurrent = snapshot => snapshot.interval === selectedBookingWeek\n    const index = snapshotIntervalList.findIndex(getCurrent)\n\n    if (dir === 'prev' && index !== 0) {\n      const interval = snapshotIntervalList[index - 1].interval\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      })\n\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          interval,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilter,\n          filterCount\n        )\n      })\n    }\n    if (dir === 'next' && index !== snapshotIntervalList.length - 1) {\n      const interval = snapshotIntervalList[index + 1].interval\n      dispatch({\n        type: 'setSelectedBookingWeek',\n        value: interval\n      })\n      applyFilters({\n        variables: getFilterVariables(\n          selectedShip.id,\n          selectedSailDate.id,\n          interval,\n          selectedProduct.id,\n          selectedItinerary.id,\n          peerGroupFilters,\n          selectedPeerShip,\n          selectedPeerProduct.id,\n          selectedPeerSailingDates[0],\n          selectedPeerSailingDates[1],\n          filter,\n          peerFilter,\n          filterCount\n        )\n      })\n    }\n  }\n\n  const getWidth = () => {\n    const { snapshotIntervalList } = data\n    const total = snapshotIntervalList[0].interval\n\n    return `${(1 - selectedBookingWeek / total) * 100}%`\n  }\n\n  if (loading) return <Loader />\n  if (error) {\n    return <Notification type=\"error\" message={error.message} />\n  }\n  return (\n    Object.entries(shipData).length > 0 && (\n      <Container>\n        <ChangeInterval>\n          <StyledIcon type=\"caret-left\" onClick={() => handleStep('prev')} />\n          <StyledSelect\n            style={{ width: 250 }}\n            value={selectedBookingWeek}\n            onChange={handleSelect}\n            timeline\n          >\n            {data.snapshotIntervalList.map((snapshot, i) => (\n              <Option value={snapshot.interval} key={'interval' + i}>\n                {snapshot.intervalLabel + ' to departure'}\n              </Option>\n            ))}\n          </StyledSelect>\n          <StyledIcon type=\"caret-right\" onClick={() => handleStep('next')} />\n        </ChangeInterval>\n        <IntervalMeter>\n          <IntervalPosition width={getWidth()} />\n        </IntervalMeter>\n      </Container>\n    )\n  )\n}\n\nexport default Timeline\n","export const DECK_SLICE_SVG_URL = 'https://s3.amazonaws.com/assets.boostlabs/celebrity/deck-slices/{SHIP_CLASS}/{DECK}.svg'\nexport const DECK_LEGEND_SVG_URL = 'https://s3.amazonaws.com/assets.boostlabs/celebrity/deck-legends/{DECK}.svg'\n","import React, { useContext, useState } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport { DECK_SLICE_SVG_URL } from './config'\nimport { GET_DECK_LIST } from 'graphql/queries'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport { useQuery } from '@apollo/client'\nimport numeral from 'numeral'\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 500px;\n  flex-direction: column;\n  flex-flow: column-reverse;\n  padding: 1em 1em;\n  border: 2px solid ${props => props.theme.biscay};\n`\nconst Deck = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${props => props.theme.jungleMist};\n  margin: 1em 0em;\n  cursor: pointer;\n\n  span {\n    border-bottom: ${props =>\n      props.selected ? `1px solid ${props.theme.jungleMist}` : ''};\n  }\n\n  img {\n    width: 200px;\n  }\n`\n\nconst DeckSvg = ({ deck }) => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedDeck, selectedShip } = state\n  const [hover, setHover] = useState(false)\n  const getSrc = () =>\n    hover || selectedDeck === deck\n      ? DECK_SLICE_SVG_URL.replace(\n          '{SHIP_CLASS}',\n          selectedShip.classId\n        ).replace('{DECK}', `${deck}_ro`)\n      : DECK_SLICE_SVG_URL.replace(\n          '{SHIP_CLASS}',\n          selectedShip.classId\n        ).replace('{DECK}', deck)\n  return (\n    <img\n      src={getSrc()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      alt=\"deck\"\n    />\n  )\n}\n\nconst SelectDeck = () => {\n  const globalState = useContext(store)\n  const { state, dispatch } = globalState\n  const { selectedDeck, selectedShip } = state\n  const [deckList, setDeckList] = useState([])\n  const { loading, error } = useQuery(GET_DECK_LIST, {\n    variables: { shipId: selectedShip.id },\n    onCompleted({ deckList }) {\n      dispatch({ type: 'setSelectedDeck', value: Math.min(...deckList) })\n      setDeckList(deckList)\n    }\n  })\n\n  const handleSelect = value => {\n    dispatch({ type: 'setSelectedDeck', value })\n  }\n\n  if (loading) {\n    return (\n      <Container>\n        <Loader />\n      </Container>\n    )\n  }\n  if (error) {\n    return (\n      <Container>\n        <Notification type=\"error\" message={error.message} />\n      </Container>\n    )\n  }\n\n  return (\n    <Container>\n      {deckList.map((deck, i) => {\n        return (\n          <Deck\n            key={'deck' + i}\n            onClick={() => handleSelect(deck)}\n            selected={selectedDeck === deck}\n          >\n            <span>D{numeral(deck).format('00')}</span>\n            <DeckSvg deck={deck} />\n          </Deck>\n        )\n      })}\n    </Container>\n  )\n}\n\nexport default SelectDeck\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 0px;\n  justify-content: center;\n`\n\nconst Title = styled.div`\n  font-size: 1em;\n  padding-bottom: 3px;\n  color: ${props => props.theme.jungleMist};\n  border-bottom: 1px solid ${props => props.theme.jungleMist};\n  margin-bottom: 5px;\n  padding-bottom: 2px;\n`\nconst ColorRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 1;\n`\nconst ColorItem = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 0.75em;\n  color: ${props => props.theme.jungleMist};\n  min-width: 100px;\n  max-height: 50px;\n  margin-right: 5px;\n\n  > span {\n    max-width: 100px;\n    line-height: 1.2;\n  }\n`\n\nconst Color = styled.div`\n  width: 14px;\n  height: 12px;\n  border-radius: 1px;\n  margin-right: 5px;\n  background-color: ${props => props.theme[props.fill]};\n`\n\nconst legendItems = [\n  {\n    label: 'Booked Staterooms',\n    color: 'silverTree'\n  },\n  {\n    label: 'Under Booked Occupancy',\n    color: 'keyLimePie'\n  },\n  {\n    label: 'Available Staterooms',\n    color: 'mandy'\n  }\n]\n\nconst LegendColors = () => {\n  return (\n    <Container>\n      <Title>Visualization Legend</Title>\n      <ColorRow>\n        {legendItems.map((item, i) => {\n          return (\n            <ColorItem key={'color' + i}>\n              <Color fill={item.color} />\n              <span>{item.label}</span>\n            </ColorItem>\n          )\n        })}\n      </ColorRow>\n    </Container>\n  )\n}\n\nexport default LegendColors\n","import React, { useContext } from 'react'\nimport { store } from 'context/store'\nimport styled from 'styled-components'\nimport peerGroupLegend from 'assets/peer-legend.png'\n\n// Project Imports\nimport SelectDeck from './SelectDeck'\nimport LegendColors from './LegendColors'\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`\n\nconst PeerGroupLegend = styled.img`\n  width: 315px;\n  margin: 20px 0px;\n`\n\nconst Legend = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { peerGroupFilters } = state\n\n  return (\n    <LegendContainer>\n      {peerGroupFilters ? (\n        <PeerGroupLegend src={peerGroupLegend} />\n      ) : (\n        <LegendColors />\n      )}\n      <SelectDeck />\n    </LegendContainer>\n  )\n}\n\nexport default Legend\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { DECK_LEGEND_SVG_URL } from './config'\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  min-width: 315px;\n`\n\nconst DeckView = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedDeck } = state\n  return (\n    <Container>\n      {Number.isInteger(selectedDeck) && (\n        <img\n          src={DECK_LEGEND_SVG_URL.replace('{DECK}', selectedDeck)}\n          alt=\"deck-view\"\n        />\n      )}\n    </Container>\n  )\n}\n\nexport default DeckView\n","import colors from 'styles/colors'\n\nexport const supplyBurndownLayout = {\n  width: 400,\n  height: 250,\n  hovermode: 'closest',\n  margin: {\n    l: 30,\n    r: 0,\n    t: 50,\n    b: 30\n  },\n  title: {\n    text: 'Supply Burndown',\n    font: {\n      color: colors.white,\n      size: 19\n    },\n    x: 0,\n    y: 1.1\n  },\n  showlegend: true,\n  legend: {\n    y: 1.5,\n    x: 1,\n    xanchor: 'right',\n    orientation: 'v',\n    font: {\n      size: 8,\n      color: colors.white\n    }\n  },\n  paper_bgcolor: colors.black0,\n  plot_bgcolor: colors.black0,\n  xaxis: {\n    showgrid: true,\n    autorange: 'reversed',\n    gridcolor: 'rgba(255, 255, 255, 0.3)',\n    showticklabels: false\n  },\n  yaxis: {\n    showgrid: false,\n    zeroline: true,\n    layout: {\n      ticks: 'outside'\n    },\n    tickfont: {\n      size: 8\n    }\n  }\n}\n\nexport const categoryClassLayout = {\n  width: 400,\n  height: 250,\n  barmode: 'stack',\n  hovermode: 'closest',\n  margin: {\n    r: 0,\n    l: 60,\n    t: 0,\n    b: 30,\n    pad: 5\n  },\n  title: {\n    text: 'Category Class',\n    font: {\n      color: colors.white,\n      size: 19\n    },\n    x: 0\n  },\n  legend: {\n    y: 1.2,\n    x: 1,\n    xanchor: 'right',\n    orientation: 'h',\n    traceorder: 'normal',\n    font: {\n      size: 8,\n      color: colors.white\n    }\n  },\n  paper_bgcolor: colors.black0,\n  plot_bgcolor: colors.black0,\n  xaxis: {\n    showgrid: true,\n    gridcolor: 'rgba(255, 255, 255, 0.3)',\n    layout: {\n      ticks: 'outside'\n    },\n    tickfont: {\n      size: 8,\n      color: colors.white\n    }\n  },\n  yaxis: {\n    showgrid: false,\n    zeroline: true,\n    layout: {\n      ticks: 'outside'\n    },\n    tickfont: {\n      size: 9,\n      color: colors.white\n    }\n  }\n}\n\nexport const deckLayout = {\n  width: 400,\n  height: 250,\n  barmode: 'stack',\n  hovermode: 'closest',\n  margin: {\n    r: 0,\n    l: 60,\n    t: 0,\n    b: 30,\n    pad: 5\n  },\n  title: {\n    text: 'Decks',\n    font: {\n      color: colors.white,\n      size: 19\n    },\n    x: 0\n  },\n  legend: {\n    y: 1.2,\n    x: 1,\n    xanchor: 'right',\n    orientation: 'h',\n    traceorder: 'normal',\n    font: {\n      size: 8,\n      color: colors.white\n    }\n  },\n  paper_bgcolor: colors.black0,\n  plot_bgcolor: colors.black0,\n  xaxis: {\n    showgrid: true,\n    gridcolor: 'rgba(255, 255, 255, 0.3)',\n    layout: {\n      ticks: 'outside'\n    },\n    tickfont: {\n      size: 8,\n      color: colors.white\n    }\n  },\n  yaxis: {\n    showgrid: false,\n    zeroline: true,\n    layout: {\n      ticks: 'outside'\n    },\n    tickfont: {\n      size: 9,\n      color: colors.white\n    }\n  }\n}\n","import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_SUPPLY_BURNDOWN_CHART } from 'graphql/queries'\nimport { supplyBurndownLayout } from './config'\nimport { createSupplyBurndown } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport { getFilterVariables } from 'helper'\nimport supplyBurndownBlurry from 'assets/supplyBurndownBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst SupplyBurndown = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const {\n    selectedShip,\n    selectedProduct,\n    selectedItinerary,\n    selectedSailDate,\n    selectedBookingWeek,\n    peerGroupFilters,\n    selectedPeerShip,\n    selectedPeerProduct,\n    selectedPeerSailingDates,\n    filter,\n    peerFilter,\n    filterCount\n  } = state\n\n  const { networkStatus, error, data } = useQuery(GET_SUPPLY_BURNDOWN_CHART, {\n    variables: getFilterVariables(\n      selectedShip.id,\n      selectedSailDate.id,\n      selectedBookingWeek,\n      selectedProduct.id,\n      selectedItinerary.id,\n      peerGroupFilters,\n      selectedPeerShip,\n      selectedPeerProduct.id,\n      selectedPeerSailingDates[0],\n      selectedPeerSailingDates[1],\n      filter,\n      peerFilter,\n      filterCount\n    ),\n    skip: !selectedShip.id || !selectedSailDate.id,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const lines = Object.keys(data.supplyBurndownChart)\n      const lineData = lines\n        .filter(v => v !== '__typename')\n        .map(line =>\n          createSupplyBurndown(\n            data.supplyBurndownChart[line],\n            line,\n            selectedShip.shipName\n          )\n        )\n      setPlotdata(lineData)\n    }\n  }, [selectedShip, selectedSailDate, data])\n\n  if (!selectedShip.id || !selectedSailDate.id) {\n    return <Blurry src={supplyBurndownBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) {\n    return <Loader />\n  }\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={supplyBurndownLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default SupplyBurndown\n","import colors from 'styles/colors'\n\nexport const createSupplyBurndown = (line, key, selectedShipName) => {\n  const x = [...line.x]\n  const y = [...line.y]\n\n  const lineColor =\n    key === 'selected'\n      ? colors.aquaForest\n      : key === 'all'\n      ? colors.lochmara\n      : colors.babyBlue\n  const marker = {\n    color: lineColor\n  }\n  const hoverinfo = 'text'\n  const hoverlabel = {\n    bgcolor: lineColor,\n    bordercolor: lineColor,\n    font: {\n      color: colors.black,\n      size: 14\n    }\n  }\n  const hovertemplate = '%{y}%<extra></extra>'\n  const name =\n    key === 'selected'\n      ? selectedShipName\n      : key === 'all'\n      ? 'All Ships Avg.'\n      : 'Peer Avg.'\n\n  return {\n    x,\n    y,\n    type: 'line',\n    mode: 'lines+markers',\n    name,\n    marker,\n    hoverinfo,\n    hoverlabel,\n    hovertemplate\n  }\n}\n\nexport const createCategoryClass = (bar, key, categoryClasses) => {\n  const x = [...bar]\n  const y = [...categoryClasses]\n  const barColor = key === 'bookedX' ? colors.lochmara : colors.babyBlue\n  const type = 'bar'\n  const width = 0.5\n  const orientation = 'h'\n  const name = key === 'bookedX' ? 'Booked' : 'Available'\n  const marker = {\n    color: barColor\n  }\n  const hoverinfo = 'text'\n  const hoverlabel = {\n    bgcolor: barColor,\n    bordercolor: barColor,\n    font: {\n      color: colors.black,\n      size: 14\n    }\n  }\n  const hovertemplate = '%{x}<extra></extra>'\n  return {\n    x,\n    y,\n    type,\n    width,\n    orientation,\n    name,\n    marker,\n    hoverinfo,\n    hoverlabel,\n    hovertemplate\n  }\n}\n\nexport const createDecks = (bar, key, categoryClasses) => {\n  const x = [...bar]\n  const y = [...categoryClasses]\n  const barColor = key === 'bookedX' ? colors.lochmara : colors.babyBlue\n  const type = 'bar'\n  const orientation = 'h'\n  const name = key === 'bookedX' ? 'Booked' : 'Available'\n  const marker = {\n    color: barColor\n  }\n  const hoverinfo = 'text'\n  const hoverlabel = {\n    bgcolor: barColor,\n    bordercolor: barColor,\n    font: {\n      color: colors.black,\n      size: 14\n    }\n  }\n  const hovertemplate = '%{x}%<extra></extra>'\n  return {\n    x,\n    y,\n    type,\n    orientation,\n    name,\n    marker,\n    hoverinfo,\n    hoverlabel,\n    hovertemplate\n  }\n}\n","import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_CABIN_CATEGORY_CLASS_CHART } from 'graphql/queries'\nimport { categoryClassLayout } from './config'\nimport { createCategoryClass } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport categoryClassBlurry from 'assets/categoryClassBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst CategoryClass = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedShip, selectedSailDate, selectedBookingWeek } = state\n\n  const { networkStatus, error, data } = useQuery(\n    GET_CABIN_CATEGORY_CLASS_CHART,\n    {\n      variables: {\n        shipId: selectedShip.id,\n        sailingDateId: selectedSailDate.id,\n        interval: selectedBookingWeek\n      },\n      skip:\n        !selectedShip.id ||\n        !selectedSailDate.id ||\n        selectedBookingWeek === null,\n      fetchPolicy: 'network-only'\n    }\n  )\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.cabinCategoryClassChart)\n      const barData = bars\n        .filter(v => v !== '__typename' && v !== 'y')\n        .map(bar =>\n          createCategoryClass(\n            data.cabinCategoryClassChart[bar],\n            bar,\n            data.cabinCategoryClassChart.y\n          )\n        )\n      setPlotdata(barData)\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data])\n\n  if (\n    !selectedShip.id ||\n    !selectedSailDate.id ||\n    selectedBookingWeek === null\n  ) {\n    return <Blurry src={categoryClassBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={categoryClassLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default CategoryClass\n","import React, { useState, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { store } from 'context/store'\nimport { useQuery } from '@apollo/client'\nimport { GET_DECK_CHART } from 'graphql/queries'\nimport { deckLayout } from './config'\nimport { createDecks } from './helper'\nimport Loader from 'components/common/Loader'\nimport Notification from 'components/common/Notification'\nimport Plot from 'react-plotly.js'\nimport decksBlurry from 'assets/decksBlurry.png'\n\nconst Blurry = styled.img`\n  width: 400px;\n`\n\nconst Decks = () => {\n  const globalState = useContext(store)\n  const { state } = globalState\n  const { selectedShip, selectedSailDate, selectedBookingWeek } = state\n\n  const { networkStatus, error, data } = useQuery(GET_DECK_CHART, {\n    variables: {\n      shipId: selectedShip.id,\n      sailingDateId: selectedSailDate.id,\n      interval: selectedBookingWeek\n    },\n    skip:\n      !selectedShip.id || !selectedSailDate.id || selectedBookingWeek === null,\n    fetchPolicy: 'network-only'\n  })\n\n  // local state for plot data\n  const [plotData, setPlotdata] = useState([])\n\n  useEffect(() => {\n    if (data) {\n      const bars = Object.keys(data.deckChart)\n      const barData = bars\n        .filter(v => v !== '__typename' && v !== 'y')\n        .map(bar => createDecks(data.deckChart[bar], bar, data.deckChart.y))\n      setPlotdata(barData)\n    }\n  }, [selectedShip, selectedSailDate, selectedBookingWeek, data, networkStatus])\n\n  if (\n    !selectedShip.id ||\n    !selectedSailDate.id ||\n    selectedBookingWeek === null\n  ) {\n    return <Blurry src={decksBlurry} />\n  }\n  if (networkStatus !== 2 && networkStatus !== 7) return <Loader />\n  if (error) return <Notification type=\"error\" message={error.message} />\n  return (\n    <>\n      <Plot\n        data={plotData}\n        layout={deckLayout}\n        config={{ displayModeBar: false }}\n      />\n    </>\n  )\n}\n\nexport default Decks\n","import React from 'react'\nimport styled from 'styled-components'\nimport SupplyBurndown from './SupplyBurndown'\nimport CategoryClass from './CategoryClass'\nimport Decks from './Decks'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1em 2em;\n  padding-top: 0;\n  background-color: ${props => props.theme.black50};\n  min-width: 450px;\n\n  > div {\n    margin-bottom: 2.5%;\n  }\n`\n\nconst Charts = () => {\n  return (\n    <Container>\n      <SupplyBurndown />\n      <CategoryClass />\n      <Decks />\n    </Container>\n  )\n}\n\nexport default Charts\n","import React, { useContext, useEffect } from 'react'\nimport { store } from 'context/store'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport styled from 'styled-components'\n\nimport { GET_FIRST_SAIL_DATE, GET_VISUAL_DECK_LIST } from 'graphql/queries'\n\n// Project Imports\nimport Header from './Header'\nimport Filters from './filters'\nimport SubFilters from './filters/sub-filters'\nimport ShipViz from './ship-viz'\nimport Timeline from './filters/timeline'\nimport Legend from './legend'\nimport DeckView from './legend/DeckView'\nimport Charts from './charts'\n\nimport { getFilterVariables } from 'helper'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst Row = styled.div`\n  display: flex;\n`\nconst VizContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  padding-right: 2em;\n`\n\nconst Main = () => {\n  const globalState = useContext(store)\n  const { dispatch } = globalState\n\n  const { data } = useQuery(GET_FIRST_SAIL_DATE)\n  const [applyFilters] = useLazyQuery(GET_VISUAL_DECK_LIST, {\n    onCompleted: data => {\n      dispatch({ type: 'setShipData', value: data.deckVisualList })\n    },\n    fetchPolicy: 'network-only'\n  })\n\n  useEffect(() => {\n    if (data) {\n      dispatch({ type: 'setSelectedShip', value: data.firstSailDate.ship })\n      dispatch({\n        type: 'setSelectedSailDate',\n        value: data.firstSailDate.sailingDate\n      })\n      applyFilters({\n        variables: getFilterVariables(data.firstSailDate.ship.id, data.firstSailDate.sailingDate.id, data.firstSailDate.interval)\n      })\n    }\n  }, [data, dispatch, applyFilters])\n\n  return (\n    <Container>\n      <Header />\n      <Filters />\n      <Row>\n        <Charts />\n        <VizContainer>\n          <SubFilters />\n          <Row>\n            <ShipViz />\n            <Legend />\n          </Row>\n          <Row style={{ padding: '2em 0em' }}>\n            <Timeline />\n            <DeckView />\n          </Row>\n        </VizContainer>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport styled from 'styled-components'\nimport Header from './main/Header'\n\nimport { Form, Icon, Input, Button } from 'antd'\n\nconst Container = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`\n\nconst hasErrors = fieldsError => {\n  return Object.keys(fieldsError).some(field => fieldsError[field])\n}\n\nconst HorizontalLoginForm = ({ form, setPassword }) => {\n  const handleSubmit = e => {\n    e.preventDefault()\n    form.validateFields((err, values) => {\n      if (!err) {\n        setPassword(values.password)\n      }\n    })\n  }\n  const {\n    getFieldDecorator,\n    getFieldsError,\n    getFieldError,\n    isFieldTouched\n  } = form\n\n  // Only show error after a field is touched.\n  const passwordError = isFieldTouched('password') && getFieldError('password')\n  return (\n    <>\n      <Header />\n      <Container>\n        <Form layout=\"inline\" onSubmit={e => handleSubmit(e)}>\n          <Form.Item\n            validateStatus={passwordError ? 'error' : ''}\n            help={passwordError || ''}\n          >\n            {getFieldDecorator('password', {\n              rules: [\n                { required: true, message: 'Please input your Password!' }\n              ]\n            })(\n              <Input\n                prefix={\n                  <Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />\n                }\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n            )}\n          </Form.Item>\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              disabled={hasErrors(getFieldsError())}\n            >\n              Log in\n            </Button>\n          </Form.Item>\n        </Form>\n      </Container>\n    </>\n  )\n}\n\nconst WrappedHorizontalLoginForm = Form.create({ name: 'horizontal_login' })(\n  HorizontalLoginForm\n)\n\nexport default WrappedHorizontalLoginForm\n","import React, { useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport theme from 'styles/colors'\nimport GlobalStyle from 'styles/GlobalStyle'\nimport 'antd/dist/antd.css'\n\n// Icons\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faDownload, faFilter, faEdit } from '@fortawesome/free-solid-svg-icons'\n\n// Context\nimport { StateProvider } from 'context/store'\n\nimport Main from 'components/main'\nimport Login from 'components/Login'\n\nlibrary.add(faDownload, faFilter, faEdit)\n\nconst App = () => {\n  const [password, setPassword] = useState('')\n  const validated = password === process.env.REACT_APP_PASSWORD\n  return (\n    <ThemeProvider theme={theme}>\n      <StateProvider>\n        <GlobalStyle />\n        {validated ? <Main /> : <Login setPassword={setPassword} />}\n      </StateProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { getApi } from './helper'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  HttpLink,\n  ApolloLink,\n  concat\n} from '@apollo/client'\n\nconst httpLink = new HttpLink({ uri: getApi() })\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      sessiontoken: process.env.REACT_APP_SESSION_TOKEN\n    }\n  })\n\n  return forward(operation)\n})\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}